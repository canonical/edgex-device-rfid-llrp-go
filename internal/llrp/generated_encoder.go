//
// Copyright (C) 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by "generate_param_code.py -i messages.yaml --test-file=binary_test.go --marshal-file=generated_marshal.go --unmarshal-file=generated_unmarshal.go --encode-file=generated_encoder.go --no-gofmt"; DO NOT EDIT.
package llrp

import (
	"encoding/binary"
	"github.com/pkg/errors"
	"io"
)

// EncodeFields for Message 46, GetSupportedVersion.
func (m *getSupportedVersion) EncodeFields(w io.Writer) error {
	// GetSupportedVersion is a header-only message
	return nil
}

// EncodeFields for Message 56, GetSupportedVersionResponse.
func (m *getSupportedVersionResponse) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.CurrentVersion), byte(m.MaxSupportedVersion)}); err != nil {
		return errors.Wrap(err, "failed to write fields for GetSupportedVersionResponse")
	}
	return nil
}

// EncodeFields for Message 47, SetProtocolVersion.
func (m *setProtocolVersion) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(m.TargetVersion)}); err != nil {
		return errors.Wrap(err, "failed to write fields for SetProtocolVersion")
	}
	return nil
}

// EncodeFields for Message 57, SetProtocolVersionResponse.
func (m *setProtocolVersionResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 1, GetReaderCapabilities.
func (m *getReaderCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ReaderCapabilitiesRequestedData)}); err != nil {
		return errors.Wrap(err, "failed to write fields for GetReaderCapabilities")
	}
	return nil
}

// EncodeFields for Message 11, GetReaderCapabilitiesResponse.
func (m *getReaderCapabilitiesResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 20, AddROSpec.
func (m *addROSpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 30, AddROSpecResponse.
func (m *addROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 21, DeleteROSpec.
func (m *deleteROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for DeleteROSpec")
	}
	return nil
}

// EncodeFields for Message 31, DeleteROSpecResponse.
func (m *deleteROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 22, StartROSpec.
func (m *startROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for StartROSpec")
	}
	return nil
}

// EncodeFields for Message 32, StartROSpecResponse.
func (m *startROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 23, StopROSpec.
func (m *stopROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for StopROSpec")
	}
	return nil
}

// EncodeFields for Message 33, StopROSpecResponse.
func (m *stopROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 24, EnableROSpec.
func (m *enableROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for EnableROSpec")
	}
	return nil
}

// EncodeFields for Message 34, EnableROSpecResponse.
func (m *enableROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 25, DisableROSpec.
func (m *disableROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for DisableROSpec")
	}
	return nil
}

// EncodeFields for Message 35, DisableROSpecResponse.
func (m *disableROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 26, GetROSpecs.
func (m *getROSpecs) EncodeFields(w io.Writer) error {
	// GetROSpecs is a header-only message
	return nil
}

// EncodeFields for Message 36, GetROSpecsResponse.
func (m *getROSpecsResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 40, AddAccessSpec.
func (m *addAccessSpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 50, AddAccessSpecResponse.
func (m *addAccessSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 41, DeleteAccessSpec.
func (m *deleteAccessSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.AccessSpecID >> 24), byte(m.AccessSpecID >> 16), byte(m.AccessSpecID >> 8), byte(m.AccessSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for DeleteAccessSpec")
	}
	return nil
}

// EncodeFields for Message 51, DeleteAccessSpecResponse.
func (m *deleteAccessSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 42, EnableAccessSpec.
func (m *enableAccessSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.AccessSpecID >> 24), byte(m.AccessSpecID >> 16), byte(m.AccessSpecID >> 8), byte(m.AccessSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for EnableAccessSpec")
	}
	return nil
}

// EncodeFields for Message 52, EnableAccessSpecResponse.
func (m *enableAccessSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 43, DisableAccessSpec.
func (m *disableAccessSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.AccessSpecID >> 24), byte(m.AccessSpecID >> 16), byte(m.AccessSpecID >> 8), byte(m.AccessSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for DisableAccessSpec")
	}
	return nil
}

// EncodeFields for Message 53, DisableAccessSpecResponse.
func (m *disableAccessSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 44, GetAccessSpecs.
func (m *getAccessSpecs) EncodeFields(w io.Writer) error {
	// GetAccessSpecs is a header-only message
	return nil
}

// EncodeFields for Message 54, GetAccessSpecsResponse.
func (m *getAccessSpecsResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 45, ClientRequestOp.
func (m *clientRequestOp) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 55, ClientRequestOpResponse.
func (m *clientRequestOpResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 60, GetReport.
func (m *getReport) EncodeFields(w io.Writer) error {
	// GetReport is a header-only message
	return nil
}

// EncodeFields for Message 61, ROAccessReport.
func (m *roAccessReport) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 62, KeepAlive.
func (m *keepAlive) EncodeFields(w io.Writer) error {
	// KeepAlive is a header-only message
	return nil
}

// EncodeFields for Message 72, KeepAliveACK.
func (m *keepAliveACK) EncodeFields(w io.Writer) error {
	// KeepAliveACK is a header-only message
	return nil
}

// EncodeFields for Message 63, ReaderEventNotification.
func (m *readerEventNotification) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 64, EnableEventsAndReports.
func (m *enableEventsAndReports) EncodeFields(w io.Writer) error {
	// EnableEventsAndReports is a header-only message
	return nil
}

// EncodeFields for Message 100, ErrorMessage.
func (m *errorMessage) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 2, GetReaderConfig.
func (m *getReaderConfig) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.AntennaID >> 8), byte(m.AntennaID), byte(m.ReaderConfigRequestedData),
		byte(m.GPIPortNum >> 8), byte(m.GPIPortNum),
		byte(m.GPOPortNum >> 8), byte(m.GPOPortNum)}); err != nil {
		return errors.Wrap(err, "failed to write fields for GetReaderConfig")
	}
	return nil
}

// EncodeFields for Message 12, GetReaderConfigResponse.
func (m *getReaderConfigResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 3, SetReaderConfig.
func (m *setReaderConfig) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		b2b(m.ResetToFactoryDefaults) << 7}); err != nil {
		return errors.Wrap(err, "failed to write fields for SetReaderConfig")
	}
	return nil
}

// EncodeFields for Message 13, SetReaderConfigResponse.
func (m *setReaderConfigResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 14, CloseConnection.
func (m *closeConnection) EncodeFields(w io.Writer) error {
	// CloseConnection is a header-only message
	return nil
}

// EncodeFields for Message 4, CloseConnectionResponse.
func (m *closeConnectionResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 1023, CustomMessage.
func (m *customMessage) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.VendorID >> 24), byte(m.VendorID >> 16), byte(m.VendorID >> 8), byte(m.VendorID), m.MessageSubtype}); err != nil {
		return errors.Wrap(err, "failed to write fields for CustomMessage")
	}
	if _, err := w.Write(m.Data); err != nil {
		return errors.Wrap(err, "failed to write Data")
	}
	return nil
}

// EncodeFields for Parameter 1, AntennaID.
func (p *antennaID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAntennaID,
		data:      p,
		sz:        3,
	}
}
func (p *antennaID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAntennaID")
	}
	return nil
}

// EncodeFields for Parameter 2, FirstSeenUTC.
func (p *firstSeenUTC) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFirstSeenUTC,
		data:      p,
		sz:        9,
	}
}
func (p *firstSeenUTC) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamFirstSeenUTC")
	}
	return nil
}

// EncodeFields for Parameter 3, FirstSeenUptime.
func (p *firstSeenUptime) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFirstSeenUptime,
		data:      p,
		sz:        9,
	}
}
func (p *firstSeenUptime) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamFirstSeenUptime")
	}
	return nil
}

// EncodeFields for Parameter 4, LastSeenUTC.
func (p *lastSeenUTC) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLastSeenUTC,
		data:      p,
		sz:        9,
	}
}
func (p *lastSeenUTC) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamLastSeenUTC")
	}
	return nil
}

// EncodeFields for Parameter 5, LastSeenUptime.
func (p *lastSeenUptime) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLastSeenUptime,
		data:      p,
		sz:        9,
	}
}
func (p *lastSeenUptime) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamLastSeenUptime")
	}
	return nil
}

// EncodeFields for Parameter 6, PeakRSSI.
func (p *peakRSSI) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamPeakRSSI,
		data:      p,
		sz:        2,
	}
}
func (p *peakRSSI) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamPeakRSSI")
	}
	return nil
}

// EncodeFields for Parameter 7, ChannelIndex.
func (p *channelIndex) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamChannelIndex,
		data:      p,
		sz:        3,
	}
}
func (p *channelIndex) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamChannelIndex")
	}
	return nil
}

// EncodeFields for Parameter 8, TagSeenCount.
func (p *tagSeenCount) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamTagSeenCount,
		data:      p,
		sz:        3,
	}
}
func (p *tagSeenCount) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamTagSeenCount")
	}
	return nil
}

// EncodeFields for Parameter 9, ROSpecID.
func (p *roSpecID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamROSpecID,
		data:      p,
		sz:        5,
	}
}
func (p *roSpecID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamROSpecID")
	}
	return nil
}

// EncodeFields for Parameter 10, InventoryParameterSpecID.
func (p *inventoryParameterSpecID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamInventoryParameterSpecID,
		data:      p,
		sz:        3,
	}
}
func (p *inventoryParameterSpecID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamInventoryParameterSpecID")
	}
	return nil
}

// EncodeFields for Parameter 11, C1G2CRC.
func (p *c1G2CRC) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2CRC,
		data:      p,
		sz:        3,
	}
}
func (p *c1G2CRC) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2CRC")
	}
	return nil
}

// EncodeFields for Parameter 12, C1G2PC.
func (p *c1G2PC) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2PC,
		data:      p,
		sz:        3,
	}
}
func (p *c1G2PC) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2PC")
	}
	return nil
}

// EncodeFields for Parameter 13, EPC96.
func (p *epc96) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamEPC96,
		data:      p,
		sz:        13,
	}
}
func (p *epc96) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		p.EPC[0], p.EPC[1], p.EPC[2], p.EPC[3], p.EPC[4], p.EPC[5], p.EPC[6], p.EPC[7], p.EPC[8], p.EPC[9], p.EPC[10], p.EPC[11]}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamEPC96")
	}
	return nil
}

// EncodeFields for Parameter 14, SpecIndex.
func (p *specIndex) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamSpecIndex,
		data:      p,
		sz:        3,
	}
}
func (p *specIndex) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamSpecIndex")
	}
	return nil
}

// EncodeFields for Parameter 15, ClientRequestOpSpecResult.
func (p *clientRequestOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamClientRequestOpSpecResult,
		data:      p,
		sz:        3,
	}
}
func (p *clientRequestOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamClientRequestOpSpecResult")
	}
	return nil
}

// EncodeFields for Parameter 16, AccessSpecID.
func (p *accessSpecID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAccessSpecID,
		data:      p,
		sz:        5,
	}
}
func (p *accessSpecID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAccessSpecID")
	}
	return nil
}

// EncodeFields for Parameter 17, OpSpecID.
func (p *opSpecID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamOpSpecID,
		data:      p,
		sz:        3,
	}
}
func (p *opSpecID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamOpSpecID")
	}
	return nil
}

// EncodeFields for Parameter 18, C1G2SingulationDetails.
func (p *c1G2SingulationDetails) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2SingulationDetails,
		data:      p,
		sz:        5,
	}
}
func (p *c1G2SingulationDetails) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.NumCollisionSlots >> 8), byte(p.NumCollisionSlots),
		byte(p.NumEmptySlots >> 8), byte(p.NumEmptySlots)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2SingulationDetails")
	}
	return nil
}

// EncodeFields for Parameter 19, C1G2XPCW1.
func (p *c1G2XPCW1) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2XPCW1,
		data:      p,
		sz:        3,
	}
}
func (p *c1G2XPCW1) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2XPCW1")
	}
	return nil
}

// EncodeFields for Parameter 20, C1G2XPCW2.
func (p *c1G2XPCW2) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2XPCW2,
		data:      p,
		sz:        3,
	}
}
func (p *c1G2XPCW2) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2XPCW2")
	}
	return nil
}

// EncodeFields for Parameter 128, UTCTimestamp.
func (p *utcTimestamp) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamUTCTimestamp,
		data:      p,
		sz:        12,
	}
}
func (p *utcTimestamp) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamUTCTimestamp")
	}
	return nil
}

// EncodeFields for Parameter 129, Uptime.
func (p *uptime) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamUptime,
		data:      p,
		sz:        12,
	}
}
func (p *uptime) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamUptime")
	}
	return nil
}

// EncodeFields for Parameter 137, GeneralDeviceCapabilities.
func (p *generalDeviceCapabilities) getHeader() paramHeader {
	nParams := 1 + len(p.ReceiveSensitivityTableEntries) +
		len(p.PerAntennaReceiveSensitivityRanges) +
		len(p.PerAntennaAirProtocols)
	if p.MaximumReceiveSensitivity != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamGeneralDeviceCapabilities,
		data:      p,
		sz:        17 + uint16(len(p.ReaderFirmwareVersion)),
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.ReceiveSensitivityTableEntries {
		sh := p.ReceiveSensitivityTableEntries[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.PerAntennaReceiveSensitivityRanges {
		sh := p.PerAntennaReceiveSensitivityRanges[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	ph.subs = append(ph.subs, p.GPIOCapabilities.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.PerAntennaAirProtocols {
		sh := p.PerAntennaAirProtocols[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.MaximumReceiveSensitivity != nil {
		sh := p.MaximumReceiveSensitivity.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *generalDeviceCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.MaxSupportedAntennas >> 8), byte(p.MaxSupportedAntennas), byte(p.GeneralCapabilityFlags),
		byte(p.DeviceManufacturerName >> 24), byte(p.DeviceManufacturerName >> 16), byte(p.DeviceManufacturerName >> 8), byte(p.DeviceManufacturerName),
		byte(p.ModelName >> 24), byte(p.ModelName >> 16), byte(p.ModelName >> 8), byte(p.ModelName)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamGeneralDeviceCapabilities")
	}
	if _, err := w.Write([]byte{byte(len(p.ReaderFirmwareVersion) >> 8), byte(len(p.ReaderFirmwareVersion) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of ReaderFirmwareVersion")
	}
	if _, err := w.Write([]byte(p.ReaderFirmwareVersion)); err != nil {
		return errors.Wrap(err, "failed to write ReaderFirmwareVersion")
	}
	return nil
}

// EncodeFields for Parameter 139, ReceiveSensitivityTableEntry.
func (p *receiveSensitivityTableEntry) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamReceiveSensitivityTableEntry,
		data:      p,
		sz:        8,
	}
}
func (p *receiveSensitivityTableEntry) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.TableIndex >> 8), byte(p.TableIndex),
		byte(p.ReceiveSensitivity >> 8), byte(p.ReceiveSensitivity)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamReceiveSensitivityTableEntry")
	}
	return nil
}

// EncodeFields for Parameter 140, PerAntennaAirProtocol.
func (p *perAntennaAirProtocol) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamPerAntennaAirProtocol,
		data:      p,
		sz:        8 + uint16(len(p.AirProtocolIDs)),
	}
}
func (p *perAntennaAirProtocol) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.AntennaID >> 8), byte(p.AntennaID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamPerAntennaAirProtocol")
	}
	if _, err := w.Write([]byte{byte(len(p.AirProtocolIDs) >> 8), byte(len(p.AirProtocolIDs) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of AirProtocolIDs")
	}
	if err := binary.Write(w, binary.BigEndian, p.AirProtocolIDs); err != nil {
		return errors.Wrap(err, "failed to write AirProtocolIDs")
	}
	return nil
}

// EncodeFields for Parameter 141, GPIOCapabilities.
func (p *gpioCapabilities) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPIOCapabilities,
		data:      p,
		sz:        8,
	}
}
func (p *gpioCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.NumGPIs >> 8), byte(p.NumGPIs),
		byte(p.NumGPOs >> 8), byte(p.NumGPOs)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamGPIOCapabilities")
	}
	return nil
}

// EncodeFields for Parameter 142, LLRPCapabilities.
func (p *llrpCapabilities) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLLRPCapabilities,
		data:      p,
		sz:        28,
	}
}
func (p *llrpCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.LLRPCapabilitiesFlags), p.MaxPriorityLevelSupported,
		byte(p.ClientRequestedOpSpecTimeout >> 8), byte(p.ClientRequestedOpSpecTimeout),
		byte(p.MaxNumROSpecs >> 24), byte(p.MaxNumROSpecs >> 16), byte(p.MaxNumROSpecs >> 8), byte(p.MaxNumROSpecs),
		byte(p.MaxNumSpecsPerROSpec >> 24), byte(p.MaxNumSpecsPerROSpec >> 16), byte(p.MaxNumSpecsPerROSpec >> 8), byte(p.MaxNumSpecsPerROSpec),
		byte(p.MaxNumInventoryParameterSpecsPerAISpec >> 24), byte(p.MaxNumInventoryParameterSpecsPerAISpec >> 16), byte(p.MaxNumInventoryParameterSpecsPerAISpec >> 8), byte(p.MaxNumInventoryParameterSpecsPerAISpec),
		byte(p.MaxNumAccessSpecs >> 24), byte(p.MaxNumAccessSpecs >> 16), byte(p.MaxNumAccessSpecs >> 8), byte(p.MaxNumAccessSpecs),
		byte(p.MaxNumOpSpecsPerAccessSpec >> 24), byte(p.MaxNumOpSpecsPerAccessSpec >> 16), byte(p.MaxNumOpSpecsPerAccessSpec >> 8), byte(p.MaxNumOpSpecsPerAccessSpec)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamLLRPCapabilities")
	}
	return nil
}

// EncodeFields for Parameter 143, RegulatoryCapabilities.
func (p *regulatoryCapabilities) getHeader() paramHeader {
	nParams := len(p.Custom)
	if p.UHFBandCapabilities != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamRegulatoryCapabilities,
		data:      p,
		sz:        8,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.UHFBandCapabilities != nil {
		sh := p.UHFBandCapabilities.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *regulatoryCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.CountryCode >> 8), byte(p.CountryCode),
		byte(p.CommunicationsStandard >> 8), byte(p.CommunicationsStandard)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamRegulatoryCapabilities")
	}
	return nil
}

// EncodeFields for Parameter 144, UHFBandCapabilities.
func (p *uhfBandCapabilities) getHeader() paramHeader {
	nParams := len(p.TransmitPowerLevelTableEntry) +
		len(p.FrequencyInformation) + len(p.UHFC1G2RFModeTable)
	if p.RFSurveyFrequencyCapabilities != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamUHFBandCapabilities,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.TransmitPowerLevelTableEntry {
		sh := p.TransmitPowerLevelTableEntry[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.FrequencyInformation {
		sh := p.FrequencyInformation[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.UHFC1G2RFModeTable {
		sh := p.UHFC1G2RFModeTable[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.RFSurveyFrequencyCapabilities != nil {
		sh := p.RFSurveyFrequencyCapabilities.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *uhfBandCapabilities) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 145, TransmitPowerLevelTableEntry.
func (p *transmitPowerLevelTableEntry) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamTransmitPowerLevelTableEntry,
		data:      p,
		sz:        8,
	}
}
func (p *transmitPowerLevelTableEntry) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Index >> 8), byte(p.Index),
		byte(p.TransmitPowerValue >> 8), byte(p.TransmitPowerValue)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamTransmitPowerLevelTableEntry")
	}
	return nil
}

// EncodeFields for Parameter 146, FrequencyInformation.
func (p *frequencyInformation) getHeader() paramHeader {
	nParams := len(p.FrequencyHopTable)
	if p.FixedFrequencyTable != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamFrequencyInformation,
		data:      p,
		sz:        5,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.FrequencyHopTable {
		sh := p.FrequencyHopTable[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.FixedFrequencyTable != nil {
		sh := p.FixedFrequencyTable.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *frequencyInformation) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.HoppingFlags)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamFrequencyInformation")
	}
	return nil
}

// EncodeFields for Parameter 147, FrequencyHopTable.
func (p *frequencyHopTable) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFrequencyHopTable,
		data:      p,
		sz:        8 + uint16(len(p.Frequencies)*4),
	}
}
func (p *frequencyHopTable) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{p.HopTableID, 0x00}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamFrequencyHopTable")
	}
	if _, err := w.Write([]byte{byte(len(p.Frequencies) >> 8), byte(len(p.Frequencies) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of Frequencies")
	}
	if err := binary.Write(w, binary.BigEndian, p.Frequencies); err != nil {
		return errors.Wrap(err, "failed to write Frequencies")
	}
	return nil
}

// EncodeFields for Parameter 148, FixedFrequencyTable.
func (p *fixedFrequencyTable) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFixedFrequencyTable,
		data:      p,
		sz:        6 + uint16(len(p.Frequencies)*4),
	}
}
func (p *fixedFrequencyTable) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(len(p.Frequencies) >> 8), byte(len(p.Frequencies) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of Frequencies")
	}
	if err := binary.Write(w, binary.BigEndian, p.Frequencies); err != nil {
		return errors.Wrap(err, "failed to write Frequencies")
	}
	return nil
}

// EncodeFields for Parameter 149, PerAntennaReceiveSensitivityRange.
func (p *perAntennaReceiveSensitivityRange) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamPerAntennaReceiveSensitivityRange,
		data:      p,
		sz:        10,
	}
}
func (p *perAntennaReceiveSensitivityRange) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.AntennaID >> 8), byte(p.AntennaID),
		byte(p.ReceiveSensitivityIndexMin >> 8), byte(p.ReceiveSensitivityIndexMin),
		byte(p.ReceiveSensitivityIndexMax >> 8), byte(p.ReceiveSensitivityIndexMax)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamPerAntennaReceiveSensitivityRange")
	}
	return nil
}

// EncodeFields for Parameter 177, ROSpec.
func (p *roSpec) getHeader() paramHeader {
	nParams := 1 + len(p.AISpec) + len(p.RFSurveySpec) + len(p.Custom)
	if p.LoopSpec != nil {
		nParams++
	}
	if p.ROReportSpec != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamROSpec,
		data:      p,
		sz:        10,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.ROBoundarySpec.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.AISpec {
		sh := p.AISpec[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.RFSurveySpec {
		sh := p.RFSurveySpec[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.LoopSpec != nil {
		sh := p.LoopSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ROReportSpec != nil {
		sh := p.ROReportSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *roSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID), p.Priority, byte(p.ROSpecCurrentState)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamROSpec")
	}
	return nil
}

// EncodeFields for Parameter 178, ROBoundarySpec.
func (p *roBoundarySpec) getHeader() paramHeader {
	ph := paramHeader{
		ParamType: ParamROBoundarySpec,
		data:      p,
		sz:        4,
		subs: []paramHeader{
			p.ROSpecStartTrigger.getHeader(),
			p.ROSpecStopTrigger.getHeader(),
		},
	}
	ph.sz += ph.subs[0].sz + ph.subs[1].sz
	return ph
}
func (p *roBoundarySpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 179, ROSpecStartTrigger.
func (p *roSpecStartTrigger) getHeader() paramHeader {
	nParams := 0
	if p.PeriodicTriggerValue != nil {
		nParams++
	}
	if p.GPITriggerValue != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamROSpecStartTrigger,
		data:      p,
		sz:        5,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.PeriodicTriggerValue != nil {
		sh := p.PeriodicTriggerValue.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.GPITriggerValue != nil {
		sh := p.GPITriggerValue.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *roSpecStartTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.ROSpecStartTriggerType)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamROSpecStartTrigger")
	}
	return nil
}

// EncodeFields for Parameter 180, PeriodicTriggerValue.
func (p *periodicTriggerValue) getHeader() paramHeader {
	nParams := 0
	if p.UTCTimestamp != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamPeriodicTriggerValue,
		data:      p,
		sz:        12,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.UTCTimestamp != nil {
		sh := p.UTCTimestamp.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *periodicTriggerValue) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Offset >> 24), byte(p.Offset >> 16), byte(p.Offset >> 8), byte(p.Offset),
		byte(p.Period >> 24), byte(p.Period >> 16), byte(p.Period >> 8), byte(p.Period)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamPeriodicTriggerValue")
	}
	return nil
}

// EncodeFields for Parameter 181, GPITriggerValue.
func (p *gpiTriggerValue) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPITriggerValue,
		data:      p,
		sz:        11,
	}
}
func (p *gpiTriggerValue) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.GPIPortNum >> 8), byte(p.GPIPortNum), byte(p.GPITriggerFlags),
		byte(p.Timeout >> 24), byte(p.Timeout >> 16), byte(p.Timeout >> 8), byte(p.Timeout)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamGPITriggerValue")
	}
	return nil
}

// EncodeFields for Parameter 182, ROSpecStopTrigger.
func (p *roSpecStopTrigger) getHeader() paramHeader {
	nParams := 0
	if p.GPITriggerValue != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamROSpecStopTrigger,
		data:      p,
		sz:        9,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.GPITriggerValue != nil {
		sh := p.GPITriggerValue.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *roSpecStopTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.ROSpecStopTriggerType),
		byte(p.DurationTriggerValue >> 24), byte(p.DurationTriggerValue >> 16), byte(p.DurationTriggerValue >> 8), byte(p.DurationTriggerValue)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamROSpecStopTrigger")
	}
	return nil
}

// EncodeFields for Parameter 183, AISpec.
func (p *aiSpec) getHeader() paramHeader {
	nParams := 1 + len(p.InventoryParameterSpec) + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamAISpec,
		data:      p,
		sz:        6 + uint16(len(p.AntennaID)*2),
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.AISpecStopTrigger.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.InventoryParameterSpec {
		sh := p.InventoryParameterSpec[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *aiSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(len(p.AntennaID) >> 8), byte(len(p.AntennaID) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of AntennaID")
	}
	if err := binary.Write(w, binary.BigEndian, p.AntennaID); err != nil {
		return errors.Wrap(err, "failed to write AntennaID")
	}
	return nil
}

// EncodeFields for Parameter 184, AISpecStopTrigger.
func (p *aiSpecStopTrigger) getHeader() paramHeader {
	nParams := 0
	if p.GPITriggerValue != nil {
		nParams++
	}
	if p.TagObservationTrigger != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAISpecStopTrigger,
		data:      p,
		sz:        9,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.GPITriggerValue != nil {
		sh := p.GPITriggerValue.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.TagObservationTrigger != nil {
		sh := p.TagObservationTrigger.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *aiSpecStopTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.AISpecStopTriggerType),
		byte(p.DurationTriggerValue >> 24), byte(p.DurationTriggerValue >> 16), byte(p.DurationTriggerValue >> 8), byte(p.DurationTriggerValue)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAISpecStopTrigger")
	}
	return nil
}

// EncodeFields for Parameter 185, TagObservationTrigger.
func (p *tagObservationTrigger) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamTagObservationTrigger,
		data:      p,
		sz:        16,
	}
}
func (p *tagObservationTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.TagObservationTriggerType), 0x00,
		byte(p.NumberofTags >> 8), byte(p.NumberofTags),
		byte(p.NumberofAttempts >> 8), byte(p.NumberofAttempts),
		byte(p.T >> 8), byte(p.T),
		byte(p.Timeout >> 24), byte(p.Timeout >> 16), byte(p.Timeout >> 8), byte(p.Timeout)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamTagObservationTrigger")
	}
	return nil
}

// EncodeFields for Parameter 186, InventoryParameterSpec.
func (p *inventoryParameterSpec) getHeader() paramHeader {
	nParams := len(p.AntennaConfiguration) + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamInventoryParameterSpec,
		data:      p,
		sz:        7,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.AntennaConfiguration {
		sh := p.AntennaConfiguration[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *inventoryParameterSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.InventoryParameterSpecID >> 8), byte(p.InventoryParameterSpecID), byte(p.AirProtocolID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamInventoryParameterSpec")
	}
	return nil
}

// EncodeFields for Parameter 187, RFSurveySpec.
func (p *rfSurveySpec) getHeader() paramHeader {
	nParams := 1 + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamRFSurveySpec,
		data:      p,
		sz:        14,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.RFSurveySpecStopTrigger.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *rfSurveySpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.AntennaID >> 8), byte(p.AntennaID),
		byte(p.StartFrequency >> 24), byte(p.StartFrequency >> 16), byte(p.StartFrequency >> 8), byte(p.StartFrequency),
		byte(p.EndFrequency >> 24), byte(p.EndFrequency >> 16), byte(p.EndFrequency >> 8), byte(p.EndFrequency)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamRFSurveySpec")
	}
	return nil
}

// EncodeFields for Parameter 188, RFSurveySpecStopTrigger.
func (p *rfSurveySpecStopTrigger) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFSurveySpecStopTrigger,
		data:      p,
		sz:        13,
	}
}
func (p *rfSurveySpecStopTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.RFSurveySpecStopTriggerType),
		byte(p.Duration >> 24), byte(p.Duration >> 16), byte(p.Duration >> 8), byte(p.Duration),
		byte(p.N >> 24), byte(p.N >> 16), byte(p.N >> 8), byte(p.N)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamRFSurveySpecStopTrigger")
	}
	return nil
}

// EncodeFields for Parameter 207, AccessSpec.
func (p *accessSpec) getHeader() paramHeader {
	nParams := 2 + len(p.Custom)
	if p.AccessReportSpec != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAccessSpec,
		data:      p,
		sz:        16,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.AccessSpecStopTrigger.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	ph.subs = append(ph.subs, p.AccessCommand.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.AccessReportSpec != nil {
		sh := p.AccessReportSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *accessSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.AccessSpecID >> 24), byte(p.AccessSpecID >> 16), byte(p.AccessSpecID >> 8), byte(p.AccessSpecID),
		byte(p.AntennaID >> 8), byte(p.AntennaID), byte(p.AirProtocolID), byte(p.AccessSpecFlags),
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAccessSpec")
	}
	return nil
}

// EncodeFields for Parameter 208, AccessSpecStopTrigger.
func (p *accessSpecStopTrigger) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAccessSpecStopTrigger,
		data:      p,
		sz:        7,
	}
}
func (p *accessSpecStopTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.AccessSpecStopTriggerType),
		byte(p.OperationCountValue >> 8), byte(p.OperationCountValue)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAccessSpecStopTrigger")
	}
	return nil
}

// EncodeFields for Parameter 209, AccessCommand.
func (p *accessCommand) getHeader() paramHeader {
	nParams := 1 + len(p.Custom)
	if p.C1G2Read != nil {
		nParams++
	}
	if p.C1G2Write != nil {
		nParams++
	}
	if p.C1G2Kill != nil {
		nParams++
	}
	if p.C1G2Recommission != nil {
		nParams++
	}
	if p.C1G2Lock != nil {
		nParams++
	}
	if p.C1G2BlockErase != nil {
		nParams++
	}
	if p.C1G2BlockWrite != nil {
		nParams++
	}
	if p.C1G2BlockPermalock != nil {
		nParams++
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		nParams++
	}
	if p.ClientRequestOpSpec != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAccessCommand,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.C1G2TagSpec.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.C1G2Read != nil {
		sh := p.C1G2Read.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Write != nil {
		sh := p.C1G2Write.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Kill != nil {
		sh := p.C1G2Kill.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Recommission != nil {
		sh := p.C1G2Recommission.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Lock != nil {
		sh := p.C1G2Lock.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockErase != nil {
		sh := p.C1G2BlockErase.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockWrite != nil {
		sh := p.C1G2BlockWrite.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockPermalock != nil {
		sh := p.C1G2BlockPermalock.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		sh := p.C1G2GetBlockPermalockStatus.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ClientRequestOpSpec != nil {
		sh := p.ClientRequestOpSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *accessCommand) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 210, ClientRequestOpSpec.
func (p *clientRequestOpSpec) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamClientRequestOpSpec,
		data:      p,
		sz:        6,
	}
}
func (p *clientRequestOpSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamClientRequestOpSpec")
	}
	return nil
}

// EncodeFields for Parameter 211, ClientRequestResponse.
func (p *clientRequestResponse) getHeader() paramHeader {
	nParams := 1
	if p.C1G2Read != nil {
		nParams++
	}
	if p.C1G2Write != nil {
		nParams++
	}
	if p.C1G2Kill != nil {
		nParams++
	}
	if p.C1G2Recommission != nil {
		nParams++
	}
	if p.C1G2Lock != nil {
		nParams++
	}
	if p.C1G2BlockErase != nil {
		nParams++
	}
	if p.C1G2BlockWrite != nil {
		nParams++
	}
	if p.C1G2BlockPermalock != nil {
		nParams++
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		nParams++
	}
	if p.ClientRequestOpSpec != nil {
		nParams++
	}
	if p.Custom != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamClientRequestResponse,
		data:      p,
		sz:        8,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.EPCData.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.C1G2Read != nil {
		sh := p.C1G2Read.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Write != nil {
		sh := p.C1G2Write.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Kill != nil {
		sh := p.C1G2Kill.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Recommission != nil {
		sh := p.C1G2Recommission.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Lock != nil {
		sh := p.C1G2Lock.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockErase != nil {
		sh := p.C1G2BlockErase.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockWrite != nil {
		sh := p.C1G2BlockWrite.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockPermalock != nil {
		sh := p.C1G2BlockPermalock.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		sh := p.C1G2GetBlockPermalockStatus.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ClientRequestOpSpec != nil {
		sh := p.ClientRequestOpSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.Custom != nil {
		sh := p.Custom.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *clientRequestResponse) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.AccessSpecID >> 24), byte(p.AccessSpecID >> 16), byte(p.AccessSpecID >> 8), byte(p.AccessSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamClientRequestResponse")
	}
	return nil
}

// EncodeFields for Parameter 217, LLRPConfigurationStateValue.
func (p *llrpConfigurationStateValue) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLLRPConfigurationStateValue,
		data:      p,
		sz:        8,
	}
}
func (p *llrpConfigurationStateValue) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamLLRPConfigurationStateValue")
	}
	return nil
}

// EncodeFields for Parameter 218, Identification.
func (p *identification) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamIdentification,
		data:      p,
		sz:        7 + uint16(len(p.ReaderID)),
	}
}
func (p *identification) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.IDType)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamIdentification")
	}
	if _, err := w.Write([]byte{byte(len(p.ReaderID) >> 8), byte(len(p.ReaderID) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of ReaderID")
	}
	if _, err := w.Write(p.ReaderID); err != nil {
		return errors.Wrap(err, "failed to write ReaderID")
	}
	return nil
}

// EncodeFields for Parameter 219, GPOWriteData.
func (p *gpoWriteData) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPOWriteData,
		data:      p,
		sz:        7,
	}
}
func (p *gpoWriteData) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.GPOPort >> 8), byte(p.GPOPort), b2b(p.GPOData) << 7}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamGPOWriteData")
	}
	return nil
}

// EncodeFields for Parameter 220, KeepAliveSpec.
func (p *keepAliveSpec) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamKeepAliveSpec,
		data:      p,
		sz:        9,
	}
}
func (p *keepAliveSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.KeepAliveTriggerType),
		byte(p.Interval >> 24), byte(p.Interval >> 16), byte(p.Interval >> 8), byte(p.Interval)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamKeepAliveSpec")
	}
	return nil
}

// EncodeFields for Parameter 221, AntennaProperties.
func (p *antennaProperties) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAntennaProperties,
		data:      p,
		sz:        9,
	}
}
func (p *antennaProperties) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{b2b(p.AntennaConnected) << 7,
		byte(p.AntennaID >> 8), byte(p.AntennaID),
		byte(p.AntennaGain >> 8), byte(p.AntennaGain)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAntennaProperties")
	}
	return nil
}

// EncodeFields for Parameter 222, AntennaConfiguration.
func (p *antennaConfiguration) getHeader() paramHeader {
	nParams := len(p.C1G2InventoryCommand) + len(p.Custom)
	if p.RFReceiver != nil {
		nParams++
	}
	if p.RFTransmitter != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAntennaConfiguration,
		data:      p,
		sz:        6,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.RFReceiver != nil {
		sh := p.RFReceiver.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.RFTransmitter != nil {
		sh := p.RFTransmitter.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2InventoryCommand {
		sh := p.C1G2InventoryCommand[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *antennaConfiguration) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.AntennaID >> 8), byte(p.AntennaID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAntennaConfiguration")
	}
	return nil
}

// EncodeFields for Parameter 223, RFReceiver.
func (p *rfReceiver) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFReceiver,
		data:      p,
		sz:        6,
	}
}
func (p *rfReceiver) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamRFReceiver")
	}
	return nil
}

// EncodeFields for Parameter 224, RFTransmitter.
func (p *rfTransmitter) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFTransmitter,
		data:      p,
		sz:        10,
	}
}
func (p *rfTransmitter) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.HopTableID >> 8), byte(p.HopTableID),
		byte(p.ChannelIndexInFixedFrequencyTable >> 8), byte(p.ChannelIndexInFixedFrequencyTable),
		byte(p.TransmitPowerTableIndex >> 8), byte(p.TransmitPowerTableIndex)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamRFTransmitter")
	}
	return nil
}

// EncodeFields for Parameter 225, GPIPortCurrentState.
func (p *gpiPortCurrentState) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPIPortCurrentState,
		data:      p,
		sz:        8,
	}
}
func (p *gpiPortCurrentState) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.GPIPort >> 8), byte(p.GPIPort), b2b(p.GPIPortEnabled) << 7, byte(p.GPIState)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamGPIPortCurrentState")
	}
	return nil
}

// EncodeFields for Parameter 226, EventsAndReports.
func (p *eventsAndReports) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamEventsAndReports,
		data:      p,
		sz:        5,
	}
}
func (p *eventsAndReports) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{b2b(bool(*p)) << 7}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamEventsAndReports")
	}
	return nil
}

// EncodeFields for Parameter 237, ROReportSpec.
func (p *roReportSpec) getHeader() paramHeader {
	nParams := 1 + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamROReportSpec,
		data:      p,
		sz:        7,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.TagReportContentSelector.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *roReportSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.ROReportTriggerType),
		byte(p.N >> 8), byte(p.N)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamROReportSpec")
	}
	return nil
}

// EncodeFields for Parameter 238, TagReportContentSelector.
func (p *tagReportContentSelector) getHeader() paramHeader {
	nParams := len(p.C1G2EPCMemorySelector) + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamTagReportContentSelector,
		data:      p,
		sz:        6,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.C1G2EPCMemorySelector {
		sh := p.C1G2EPCMemorySelector[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *tagReportContentSelector) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		b2b(p.EnableROSpecID)<<7 | b2b(p.EnableSpecIndex)<<6 | b2b(p.EnableInventoryParamSpecID)<<5 | b2b(p.EnableAntennaID)<<4 | b2b(p.EnableChannelIndex)<<3 | b2b(p.EnablePeakRSSI)<<2 | b2b(p.EnableFirstSeenTimestamp)<<1 | b2b(p.EnableLastSeenTimestamp)<<0, b2b(p.EnableTagSeenCount)<<7 | b2b(p.EnableAccessSpecID)<<6}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamTagReportContentSelector")
	}
	return nil
}

// EncodeFields for Parameter 239, AccessReportSpec.
func (p *accessReportSpec) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAccessReportSpec,
		data:      p,
		sz:        5,
	}
}
func (p *accessReportSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAccessReportSpec")
	}
	return nil
}

// EncodeFields for Parameter 240, TagReportData.
func (p *tagReportData) getHeader() paramHeader {
	nParams := 2 + len(p.C1G2PC) + len(p.C1G2XPCW1) + len(p.C1G2XPCW2) +
		len(p.C1G2CRC) + len(p.C1G2ReadOpSpecResult) +
		len(p.C1G2WriteOpSpecResult) + len(p.C1G2KillOpSpecResult) +
		len(p.C1G2LockOpSpecResult) + len(p.C1G2BlockEraseOpSpecResult) +
		len(p.C1G2BlockWriteOpSpecResult) +
		len(p.C1G2RecommissionOpSpecResult) +
		len(p.C1G2BlockPermalockOpSpecResult) +
		len(p.C1G2GetBlockPermalockStatusOpSpecResult) +
		len(p.ClientRequestOpSpecResult) + len(p.Custom)
	if p.ROSpecID != nil {
		nParams++
	}
	if p.SpecIndex != nil {
		nParams++
	}
	if p.InventoryParameterSpecID != nil {
		nParams++
	}
	if p.AntennaID != nil {
		nParams++
	}
	if p.PeakRSSI != nil {
		nParams++
	}
	if p.ChannelIndex != nil {
		nParams++
	}
	if p.FirstSeenUTC != nil {
		nParams++
	}
	if p.FirstSeenUptime != nil {
		nParams++
	}
	if p.LastSeenUTC != nil {
		nParams++
	}
	if p.LastSeenUptime != nil {
		nParams++
	}
	if p.TagSeenCount != nil {
		nParams++
	}
	if p.AccessSpecID != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamTagReportData,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	switch {
	case p.EPCData.EPC != nil:
		ph.subs = append(ph.subs, p.EPCData.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	case p.EPC96.EPC != nil:
		ph.subs = append(ph.subs, p.EPC96.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	}
	if p.ROSpecID != nil {
		sh := p.ROSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SpecIndex != nil {
		sh := p.SpecIndex.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.InventoryParameterSpecID != nil {
		sh := p.InventoryParameterSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AntennaID != nil {
		sh := p.AntennaID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.PeakRSSI != nil {
		sh := p.PeakRSSI.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ChannelIndex != nil {
		sh := p.ChannelIndex.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.FirstSeenUTC != nil {
		sh := p.FirstSeenUTC.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.FirstSeenUptime != nil {
		sh := p.FirstSeenUptime.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.LastSeenUTC != nil {
		sh := p.LastSeenUTC.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.LastSeenUptime != nil {
		sh := p.LastSeenUptime.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.TagSeenCount != nil {
		sh := p.TagSeenCount.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2PC {
		sh := p.C1G2PC[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2XPCW1 {
		sh := p.C1G2XPCW1[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2XPCW2 {
		sh := p.C1G2XPCW2[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2CRC {
		sh := p.C1G2CRC[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AccessSpecID != nil {
		sh := p.AccessSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2ReadOpSpecResult {
		sh := p.C1G2ReadOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2WriteOpSpecResult {
		sh := p.C1G2WriteOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2KillOpSpecResult {
		sh := p.C1G2KillOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2LockOpSpecResult {
		sh := p.C1G2LockOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2BlockEraseOpSpecResult {
		sh := p.C1G2BlockEraseOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2BlockWriteOpSpecResult {
		sh := p.C1G2BlockWriteOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2RecommissionOpSpecResult {
		sh := p.C1G2RecommissionOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2BlockPermalockOpSpecResult {
		sh := p.C1G2BlockPermalockOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.C1G2GetBlockPermalockStatusOpSpecResult {
		sh := p.C1G2GetBlockPermalockStatusOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.ClientRequestOpSpecResult {
		sh := p.ClientRequestOpSpecResult[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *tagReportData) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 241, EPCData.
func (p *epcData) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamEPCData,
		data:      p,
		sz:        6 + uint16(((int(p.EPCNumBits)-1)>>3)+1),
	}
}
func (p *epcData) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.EPCNumBits >> 8), byte(p.EPCNumBits & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of EPC")
	}
	if _, err := w.Write(p.EPC); err != nil {
		return errors.Wrap(err, "failed to write EPC")
	}
	return nil
}

// EncodeFields for Parameter 242, RFSurveyReportData.
func (p *rfSurveyReportData) getHeader() paramHeader {
	nParams := len(p.FrequencyRSSILevelEntry) + len(p.Custom)
	if p.ROSpecID != nil {
		nParams++
	}
	if p.SpecIndex != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamRFSurveyReportData,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.ROSpecID != nil {
		sh := p.ROSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SpecIndex != nil {
		sh := p.SpecIndex.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.FrequencyRSSILevelEntry {
		sh := p.FrequencyRSSILevelEntry[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *rfSurveyReportData) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 243, FrequencyRSSILevelEntry.
func (p *frequencyRSSILevelEntry) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFrequencyRSSILevelEntry,
		data:      p,
		sz:        14,
		subs: []paramHeader{
			p.UTCTimestamp.getHeader(),
			p.Uptime.getHeader(),
		},
	}
}
func (p *frequencyRSSILevelEntry) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Frequency >> 24), byte(p.Frequency >> 16), byte(p.Frequency >> 8), byte(p.Frequency),
		byte(p.Bandwidth >> 24), byte(p.Bandwidth >> 16), byte(p.Bandwidth >> 8), byte(p.Bandwidth), byte(p.AverageRSSI), byte(p.PeakRSSI)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamFrequencyRSSILevelEntry")
	}
	return nil
}

// EncodeFields for Parameter 244, ReaderEventNotificationSpec.
func (p *readerEventNotificationSpec) getHeader() paramHeader {
	nParams := len(p.EventNotificationState)
	ph := paramHeader{
		ParamType: ParamReaderEventNotificationSpec,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.EventNotificationState {
		sh := p.EventNotificationState[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *readerEventNotificationSpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 245, EventNotificationState.
func (p *eventNotificationState) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamEventNotificationState,
		data:      p,
		sz:        7,
	}
}
func (p *eventNotificationState) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ReaderEventType >> 8), byte(p.ReaderEventType), b2b(p.NotificationEnabled) << 7}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamEventNotificationState")
	}
	return nil
}

// EncodeFields for Parameter 246, ReaderEventNotificationData.
func (p *readerEventNotificationData) getHeader() paramHeader {
	nParams := 2 + len(p.Custom)
	if p.HoppingEvent != nil {
		nParams++
	}
	if p.GPIEvent != nil {
		nParams++
	}
	if p.ROSpecEvent != nil {
		nParams++
	}
	if p.ReportBufferLevelWarningEvent != nil {
		nParams++
	}
	if p.ReportBufferOverflowErrorEvent != nil {
		nParams++
	}
	if p.ReaderExceptionEvent != nil {
		nParams++
	}
	if p.RFSurveyEvent != nil {
		nParams++
	}
	if p.AISpecEvent != nil {
		nParams++
	}
	if p.AntennaEvent != nil {
		nParams++
	}
	if p.ConnectionAttemptEvent != nil {
		nParams++
	}
	if p.ConnectionCloseEvent != nil {
		nParams++
	}
	if p.SpecLoopEvent != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamReaderEventNotificationData,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	switch {
	case p.UTCTimestamp != 0:
		ph.subs = append(ph.subs, p.UTCTimestamp.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	case p.Uptime != 0:
		ph.subs = append(ph.subs, p.Uptime.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	}
	if p.HoppingEvent != nil {
		sh := p.HoppingEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.GPIEvent != nil {
		sh := p.GPIEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ROSpecEvent != nil {
		sh := p.ROSpecEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ReportBufferLevelWarningEvent != nil {
		sh := p.ReportBufferLevelWarningEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ReportBufferOverflowErrorEvent != nil {
		sh := p.ReportBufferOverflowErrorEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ReaderExceptionEvent != nil {
		sh := p.ReaderExceptionEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.RFSurveyEvent != nil {
		sh := p.RFSurveyEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AISpecEvent != nil {
		sh := p.AISpecEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AntennaEvent != nil {
		sh := p.AntennaEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ConnectionAttemptEvent != nil {
		sh := p.ConnectionAttemptEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ConnectionCloseEvent != nil {
		sh := p.ConnectionCloseEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SpecLoopEvent != nil {
		sh := p.SpecLoopEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *readerEventNotificationData) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 247, HoppingEvent.
func (p *hoppingEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamHoppingEvent,
		data:      p,
		sz:        6,
	}
}
func (p *hoppingEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamHoppingEvent")
	}
	return nil
}

// EncodeFields for Parameter 248, GPIEvent.
func (p *gpiEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPIEvent,
		data:      p,
		sz:        7,
	}
}
func (p *gpiEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.GPIPort >> 8), byte(p.GPIPort), b2b(p.GPIEvent) << 7}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamGPIEvent")
	}
	return nil
}

// EncodeFields for Parameter 249, ROSpecEvent.
func (p *roSpecEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamROSpecEvent,
		data:      p,
		sz:        13,
	}
}
func (p *roSpecEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.ROSpecEventType),
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID),
		byte(p.PreemptingROSpecID >> 24), byte(p.PreemptingROSpecID >> 16), byte(p.PreemptingROSpecID >> 8), byte(p.PreemptingROSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamROSpecEvent")
	}
	return nil
}

// EncodeFields for Parameter 250, ReportBufferLevelWarningEvent.
func (p *reportBufferLevelWarningEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamReportBufferLevelWarningEvent,
		data:      p,
		sz:        5,
	}
}
func (p *reportBufferLevelWarningEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamReportBufferLevelWarningEvent")
	}
	return nil
}

// EncodeFields for Parameter 251, ReportBufferOverflowErrorEvent.
func (p *reportBufferOverflowErrorEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamReportBufferOverflowErrorEvent,
		data:      p,
		sz:        4,
	}
}
func (p *reportBufferOverflowErrorEvent) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 252, ReaderExceptionEvent.
func (p *readerExceptionEvent) getHeader() paramHeader {
	nParams := len(p.Custom)
	if p.ROSpecID != nil {
		nParams++
	}
	if p.SpecIndex != nil {
		nParams++
	}
	if p.InventoryParameterSpecID != nil {
		nParams++
	}
	if p.AntennaID != nil {
		nParams++
	}
	if p.AccessSpecID != nil {
		nParams++
	}
	if p.OpSpecID != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamReaderExceptionEvent,
		data:      p,
		sz:        6 + uint16(len(p.Message)),
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.ROSpecID != nil {
		sh := p.ROSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SpecIndex != nil {
		sh := p.SpecIndex.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.InventoryParameterSpecID != nil {
		sh := p.InventoryParameterSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AntennaID != nil {
		sh := p.AntennaID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AccessSpecID != nil {
		sh := p.AccessSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.OpSpecID != nil {
		sh := p.OpSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *readerExceptionEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(len(p.Message) >> 8), byte(len(p.Message) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of Message")
	}
	if _, err := w.Write([]byte(p.Message)); err != nil {
		return errors.Wrap(err, "failed to write Message")
	}
	return nil
}

// EncodeFields for Parameter 253, RFSurveyEvent.
func (p *rfSurveyEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFSurveyEvent,
		data:      p,
		sz:        9,
	}
}
func (p *rfSurveyEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.RFSurveyEventType),
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamRFSurveyEvent")
	}
	return nil
}

// EncodeFields for Parameter 254, AISpecEvent.
func (p *aiSpecEvent) getHeader() paramHeader {
	nParams := 0
	if p.C1G2SingulationDetails != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAISpecEvent,
		data:      p,
		sz:        11,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.C1G2SingulationDetails != nil {
		sh := p.C1G2SingulationDetails.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *aiSpecEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.AISpecEventType),
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID),
		byte(p.SpecIndex >> 8), byte(p.SpecIndex)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAISpecEvent")
	}
	return nil
}

// EncodeFields for Parameter 255, AntennaEvent.
func (p *antennaEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAntennaEvent,
		data:      p,
		sz:        7,
	}
}
func (p *antennaEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.AntennaEventType),
		byte(p.AntennaID >> 8), byte(p.AntennaID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamAntennaEvent")
	}
	return nil
}

// EncodeFields for Parameter 256, ConnectionAttemptEvent.
func (p *connectionAttemptEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamConnectionAttemptEvent,
		data:      p,
		sz:        6,
	}
}
func (p *connectionAttemptEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamConnectionAttemptEvent")
	}
	return nil
}

// EncodeFields for Parameter 257, ConnectionCloseEvent.
func (p *connectionCloseEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamConnectionCloseEvent,
		data:      p,
		sz:        4,
	}
}
func (p *connectionCloseEvent) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 287, LLRPStatus.
func (p *llrpStatus) getHeader() paramHeader {
	nParams := 0
	if p.FieldError != nil {
		nParams++
	}
	if p.ParameterError != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamLLRPStatus,
		data:      p,
		sz:        8 + uint16(len(p.ErrorDescription)),
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.FieldError != nil {
		sh := p.FieldError.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ParameterError != nil {
		sh := p.ParameterError.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *llrpStatus) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Status >> 8), byte(p.Status)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamLLRPStatus")
	}
	if _, err := w.Write([]byte{byte(len(p.ErrorDescription) >> 8), byte(len(p.ErrorDescription) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of ErrorDescription")
	}
	if _, err := w.Write([]byte(p.ErrorDescription)); err != nil {
		return errors.Wrap(err, "failed to write ErrorDescription")
	}
	return nil
}

// EncodeFields for Parameter 288, FieldError.
func (p *fieldError) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFieldError,
		data:      p,
		sz:        8,
	}
}
func (p *fieldError) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.FieldIndex >> 8), byte(p.FieldIndex),
		byte(p.ErrorCode >> 8), byte(p.ErrorCode)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamFieldError")
	}
	return nil
}

// EncodeFields for Parameter 289, ParameterError.
func (p *parameterError) getHeader() paramHeader {
	nParams := 0
	if p.ParameterError != nil {
		nParams++
	}
	if p.FieldError != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamParameterError,
		data:      p,
		sz:        8,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.ParameterError != nil {
		sh := p.ParameterError.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.FieldError != nil {
		sh := p.FieldError.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *parameterError) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ParameterType >> 8), byte(p.ParameterType),
		byte(p.ErrorCode >> 8), byte(p.ErrorCode)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamParameterError")
	}
	return nil
}

// EncodeFields for Parameter 327, C1G2LLRPCapabilities.
func (p *c1G2LLRPCapabilities) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2LLRPCapabilities,
		data:      p,
		sz:        7,
	}
}
func (p *c1G2LLRPCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2CapabilitiesFlags),
		byte(p.MaxNumSelectFiltersPerQuery >> 8), byte(p.MaxNumSelectFiltersPerQuery)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2LLRPCapabilities")
	}
	return nil
}

// EncodeFields for Parameter 328, UHFC1G2RFModeTable.
func (p *uhfc1G2RFModeTable) getHeader() paramHeader {
	nParams := len(p.UHFC1G2RFModeTableEntry)
	ph := paramHeader{
		ParamType: ParamUHFC1G2RFModeTable,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.UHFC1G2RFModeTableEntry {
		sh := p.UHFC1G2RFModeTableEntry[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *uhfc1G2RFModeTable) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 329, UHFC1G2RFModeTableEntry.
func (p *uhfc1G2RFModeTableEntry) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamUHFC1G2RFModeTableEntry,
		data:      p,
		sz:        32,
	}
}
func (p *uhfc1G2RFModeTableEntry) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ModeID >> 24), byte(p.ModeID >> 16), byte(p.ModeID >> 8), byte(p.ModeID), byte(p.UHFC1G2RFModeFlags),
		byte(p.BackscatterDataRate >> 24), byte(p.BackscatterDataRate >> 16), byte(p.BackscatterDataRate >> 8), byte(p.BackscatterDataRate), byte(p.Modulation), byte(p.ForwardLinkModulation),
		byte(p.PulseIntervalEncodingRatio >> 24), byte(p.PulseIntervalEncodingRatio >> 16), byte(p.PulseIntervalEncodingRatio >> 8), byte(p.PulseIntervalEncodingRatio),
		byte(p.MinTariTime >> 24), byte(p.MinTariTime >> 16), byte(p.MinTariTime >> 8), byte(p.MinTariTime),
		byte(p.MaxTariTime >> 24), byte(p.MaxTariTime >> 16), byte(p.MaxTariTime >> 8), byte(p.MaxTariTime),
		byte(p.StepTariTime >> 24), byte(p.StepTariTime >> 16), byte(p.StepTariTime >> 8), byte(p.StepTariTime), byte(p.SpectralMask)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamUHFC1G2RFModeTableEntry")
	}
	return nil
}

// EncodeFields for Parameter 330, C1G2InventoryCommand.
func (p *c1G2InventoryCommand) getHeader() paramHeader {
	nParams := len(p.C1G2Filter) + len(p.Custom)
	if p.C1G2RFControl != nil {
		nParams++
	}
	if p.C1G2SingulationControl != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamC1G2InventoryCommand,
		data:      p,
		sz:        5,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.C1G2Filter {
		sh := p.C1G2Filter[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2RFControl != nil {
		sh := p.C1G2RFControl.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2SingulationControl != nil {
		sh := p.C1G2SingulationControl.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *c1G2InventoryCommand) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.C1G2InventoryCommandFlags)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2InventoryCommand")
	}
	return nil
}

// EncodeFields for Parameter 331, C1G2Filter.
func (p *c1G2Filter) getHeader() paramHeader {
	nParams := 1
	if p.C1G2TagInventoryStateAwareFilterAction != nil {
		nParams++
	}
	if p.C1G2TagInventoryStateUnawareFilterAction != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamC1G2Filter,
		data:      p,
		sz:        5,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.C1G2TagInventoryMask.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.C1G2TagInventoryStateAwareFilterAction != nil {
		sh := p.C1G2TagInventoryStateAwareFilterAction.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2TagInventoryStateUnawareFilterAction != nil {
		sh := p.C1G2TagInventoryStateUnawareFilterAction.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *c1G2Filter) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2FilterAction)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2Filter")
	}
	return nil
}

// EncodeFields for Parameter 332, C1G2TagInventoryMask.
func (p *c1G2TagInventoryMask) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TagInventoryMask,
		data:      p,
		sz:        9 + uint16(((int(p.TagMaskNumBits)-1)>>3)+1),
	}
}
func (p *c1G2TagInventoryMask) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2MemoryBank) << 6,
		byte(p.MostSignificantBit >> 8), byte(p.MostSignificantBit)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2TagInventoryMask")
	}
	if _, err := w.Write([]byte{byte(p.TagMaskNumBits >> 8), byte(p.TagMaskNumBits & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of TagMask")
	}
	if _, err := w.Write(p.TagMask); err != nil {
		return errors.Wrap(err, "failed to write TagMask")
	}
	return nil
}

// EncodeFields for Parameter 333,
// C1G2TagInventoryStateAwareFilterAction.
func (p *c1G2TagInventoryStateAwareFilterAction) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TagInventoryStateAwareFilterAction,
		data:      p,
		sz:        6,
	}
}
func (p *c1G2TagInventoryStateAwareFilterAction) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.C1G2TagInventoryTarget), byte(p.C1G2TagInventoryStateAwareFilterAction)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2TagInventoryStateAwareFilterAction")
	}
	return nil
}

// EncodeFields for Parameter 334,
// C1G2TagInventoryStateUnawareFilterAction.
func (p *c1G2TagInventoryStateUnawareFilterAction) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TagInventoryStateUnawareFilterAction,
		data:      p,
		sz:        5,
	}
}
func (p *c1G2TagInventoryStateUnawareFilterAction) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2TagInventoryStateUnawareFilterAction")
	}
	return nil
}

// EncodeFields for Parameter 335, C1G2RFControl.
func (p *c1G2RFControl) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2RFControl,
		data:      p,
		sz:        8,
	}
}
func (p *c1G2RFControl) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.IndexIntoUHFC1G2RFModeTable >> 8), byte(p.IndexIntoUHFC1G2RFModeTable),
		byte(p.Tari >> 8), byte(p.Tari)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2RFControl")
	}
	return nil
}

// EncodeFields for Parameter 336, C1G2SingulationControl.
func (p *c1G2SingulationControl) getHeader() paramHeader {
	nParams := 0
	if p.C1G2TagInventoryStateAwareSingulationAction != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamC1G2SingulationControl,
		data:      p,
		sz:        11,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.C1G2TagInventoryStateAwareSingulationAction != nil {
		sh := p.C1G2TagInventoryStateAwareSingulationAction.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *c1G2SingulationControl) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2SingulationControlSession),
		byte(p.TagPopulation >> 8), byte(p.TagPopulation),
		byte(p.TagTransitTime >> 24), byte(p.TagTransitTime >> 16), byte(p.TagTransitTime >> 8), byte(p.TagTransitTime)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2SingulationControl")
	}
	return nil
}

// EncodeFields for Parameter 337,
// C1G2TagInventoryStateAwareSingulationAction.
func (p *c1G2TagInventoryStateAwareSingulationAction) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TagInventoryStateAwareSingulationAction,
		data:      p,
		sz:        5,
	}
}
func (p *c1G2TagInventoryStateAwareSingulationAction) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2TagInventoryStateAwareSingulationAction")
	}
	return nil
}

// EncodeFields for Parameter 338, C1G2TagSpec.
func (p *c1G2TagSpec) getHeader() paramHeader {
	nParams := 1
	if p.TagPattern2 != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamC1G2TagSpec,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.TagPattern1.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.TagPattern2 != nil {
		sh := p.TagPattern2.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *c1G2TagSpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 339, C1G2TargetTag.
func (p *c1G2TargetTag) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TargetTag,
		data:      p,
		sz: 11 + uint16(((int(p.TagMaskNumBits)-1)>>3)+1) +
			uint16(((int(p.TagDataNumBits)-1)>>3)+1),
	}
}
func (p *c1G2TargetTag) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.C1G2MemoryBank)<<6 | b2b(p.MatchFlag)<<5,
		byte(p.MostSignificantBit >> 8), byte(p.MostSignificantBit)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2TargetTag")
	}
	if _, err := w.Write([]byte{byte(p.TagMaskNumBits >> 8), byte(p.TagMaskNumBits & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of TagMask")
	}
	if _, err := w.Write(p.TagMask); err != nil {
		return errors.Wrap(err, "failed to write TagMask")
	}
	if _, err := w.Write([]byte{byte(p.TagDataNumBits >> 8), byte(p.TagDataNumBits & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of TagData")
	}
	if _, err := w.Write(p.TagData); err != nil {
		return errors.Wrap(err, "failed to write TagData")
	}
	return nil
}

// EncodeFields for Parameter 341, C1G2Read.
func (p *c1G2Read) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2Read,
		data:      p,
		sz:        15,
	}
}
func (p *c1G2Read) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.WordAddress >> 8), byte(p.WordAddress),
		byte(p.WordCount >> 8), byte(p.WordCount)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2Read")
	}
	return nil
}

// EncodeFields for Parameter 342, C1G2Write.
func (p *c1G2Write) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2Write,
		data:      p,
		sz:        15 + uint16(len(p.Data)*2),
	}
}
func (p *c1G2Write) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.WordAddress >> 8), byte(p.WordAddress)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2Write")
	}
	if _, err := w.Write([]byte{byte(len(p.Data) >> 8), byte(len(p.Data) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of Data")
	}
	if err := binary.Write(w, binary.BigEndian, p.Data); err != nil {
		return errors.Wrap(err, "failed to write Data")
	}
	return nil
}

// EncodeFields for Parameter 343, C1G2Kill.
func (p *c1G2Kill) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2Kill,
		data:      p,
		sz:        10,
	}
}
func (p *c1G2Kill) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.KillPassword >> 24), byte(p.KillPassword >> 16), byte(p.KillPassword >> 8), byte(p.KillPassword)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2Kill")
	}
	return nil
}

// EncodeFields for Parameter 344, C1G2Lock.
func (p *c1G2Lock) getHeader() paramHeader {
	nParams := len(p.C1G2LockPayload)
	ph := paramHeader{
		ParamType: ParamC1G2Lock,
		data:      p,
		sz:        10,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.C1G2LockPayload {
		sh := p.C1G2LockPayload[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *c1G2Lock) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2Lock")
	}
	return nil
}

// EncodeFields for Parameter 345, C1G2LockPayload.
func (p *c1G2LockPayload) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2LockPayload,
		data:      p,
		sz:        6,
	}
}
func (p *c1G2LockPayload) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.LockPrivilege), byte(p.LockData)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2LockPayload")
	}
	return nil
}

// EncodeFields for Parameter 346, C1G2BlockErase.
func (p *c1G2BlockErase) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockErase,
		data:      p,
		sz:        15,
	}
}
func (p *c1G2BlockErase) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.WordAddress >> 8), byte(p.WordAddress),
		byte(p.WordCount >> 8), byte(p.WordCount)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2BlockErase")
	}
	return nil
}

// EncodeFields for Parameter 347, C1G2BlockWrite.
func (p *c1G2BlockWrite) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockWrite,
		data:      p,
		sz:        15 + uint16(len(p.Data)*2),
	}
}
func (p *c1G2BlockWrite) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.WordAddress >> 8), byte(p.WordAddress)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2BlockWrite")
	}
	if _, err := w.Write([]byte{byte(len(p.Data) >> 8), byte(len(p.Data) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of Data")
	}
	if err := binary.Write(w, binary.BigEndian, p.Data); err != nil {
		return errors.Wrap(err, "failed to write Data")
	}
	return nil
}

// EncodeFields for Parameter 348, C1G2EPCMemorySelector.
func (p *c1G2EPCMemorySelector) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2EPCMemorySelector,
		data:      p,
		sz:        5,
	}
}
func (p *c1G2EPCMemorySelector) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2EPCMemorySelector")
	}
	return nil
}

// EncodeFields for Parameter 349, C1G2ReadOpSpecResult.
func (p *c1G2ReadOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2ReadOpSpecResult,
		data:      p,
		sz:        9 + uint16(len(p.Data)*2),
	}
}
func (p *c1G2ReadOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2ReadOpSpecResultType),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2ReadOpSpecResult")
	}
	if _, err := w.Write([]byte{byte(len(p.Data) >> 8), byte(len(p.Data) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of Data")
	}
	if err := binary.Write(w, binary.BigEndian, p.Data); err != nil {
		return errors.Wrap(err, "failed to write Data")
	}
	return nil
}

// EncodeFields for Parameter 350, C1G2WriteOpSpecResult.
func (p *c1G2WriteOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2WriteOpSpecResult,
		data:      p,
		sz:        9,
	}
}
func (p *c1G2WriteOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2WriteOpSpecResultType),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.WordsWritten >> 8), byte(p.WordsWritten)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2WriteOpSpecResult")
	}
	return nil
}

// EncodeFields for Parameter 351, C1G2KillOpSpecResult.
func (p *c1G2KillOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2KillOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *c1G2KillOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2KillResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2KillOpSpecResult")
	}
	return nil
}

// EncodeFields for Parameter 352, C1G2LockOpSpecResult.
func (p *c1G2LockOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2LockOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *c1G2LockOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2LockResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2LockOpSpecResult")
	}
	return nil
}

// EncodeFields for Parameter 353, C1G2BlockEraseOpSpecResult.
func (p *c1G2BlockEraseOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockEraseOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *c1G2BlockEraseOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2BlockEraseResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2BlockEraseOpSpecResult")
	}
	return nil
}

// EncodeFields for Parameter 354, C1G2BlockWriteOpSpecResult.
func (p *c1G2BlockWriteOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockWriteOpSpecResult,
		data:      p,
		sz:        9,
	}
}
func (p *c1G2BlockWriteOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2BlockWriteResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.WordsWritten >> 8), byte(p.WordsWritten)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2BlockWriteOpSpecResult")
	}
	return nil
}

// EncodeFields for Parameter 355, LoopSpec.
func (p *loopSpec) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLoopSpec,
		data:      p,
		sz:        8,
	}
}
func (p *loopSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamLoopSpec")
	}
	return nil
}

// EncodeFields for Parameter 356, SpecLoopEvent.
func (p *specLoopEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamSpecLoopEvent,
		data:      p,
		sz:        12,
	}
}
func (p *specLoopEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID),
		byte(p.LoopCount >> 24), byte(p.LoopCount >> 16), byte(p.LoopCount >> 8), byte(p.LoopCount)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamSpecLoopEvent")
	}
	return nil
}

// EncodeFields for Parameter 357, C1G2Recommission.
func (p *c1G2Recommission) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2Recommission,
		data:      p,
		sz:        11,
	}
}
func (p *c1G2Recommission) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.KillPassword >> 24), byte(p.KillPassword >> 16), byte(p.KillPassword >> 8), byte(p.KillPassword), byte(p.C1G2RecommissionFlags)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2Recommission")
	}
	return nil
}

// EncodeFields for Parameter 358, C1G2BlockPermalock.
func (p *c1G2BlockPermalock) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockPermalock,
		data:      p,
		sz:        15 + uint16(len(p.BlockMask)*2),
	}
}
func (p *c1G2BlockPermalock) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.BlockAddress >> 8), byte(p.BlockAddress)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2BlockPermalock")
	}
	if _, err := w.Write([]byte{byte(len(p.BlockMask) >> 8), byte(len(p.BlockMask) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of BlockMask")
	}
	if err := binary.Write(w, binary.BigEndian, p.BlockMask); err != nil {
		return errors.Wrap(err, "failed to write BlockMask")
	}
	return nil
}

// EncodeFields for Parameter 359, C1G2GetBlockPermalockStatus.
func (p *c1G2GetBlockPermalockStatus) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2GetBlockPermalockStatus,
		data:      p,
		sz:        15,
	}
}
func (p *c1G2GetBlockPermalockStatus) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.BlockAddress >> 8), byte(p.BlockAddress),
		byte(p.BlockRange >> 8), byte(p.BlockRange)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2GetBlockPermalockStatus")
	}
	return nil
}

// EncodeFields for Parameter 360, C1G2RecommissionOpSpecResult.
func (p *c1G2RecommissionOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2RecommissionOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *c1G2RecommissionOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2RecommissionResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2RecommissionOpSpecResult")
	}
	return nil
}

// EncodeFields for Parameter 361, C1G2BlockPermalockOpSpecResult.
func (p *c1G2BlockPermalockOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockPermalockOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *c1G2BlockPermalockOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2BlockPermalockResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2BlockPermalockOpSpecResult")
	}
	return nil
}

// EncodeFields for Parameter 362,
// C1G2GetBlockPermalockStatusOpSpecResult.
func (p *c1G2GetBlockPermalockStatusOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2GetBlockPermalockStatusOpSpecResult,
		data:      p,
		sz:        9 + uint16(len(p.PermalockStatus)*2),
	}
}
func (p *c1G2GetBlockPermalockStatusOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2GetBlockPermalockStatusResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamC1G2GetBlockPermalockStatusOpSpecResult")
	}
	if _, err := w.Write([]byte{byte(len(p.PermalockStatus) >> 8), byte(len(p.PermalockStatus) & 0xFF)}); err != nil {
		return errors.Wrap(err, "failed to write length of PermalockStatus")
	}
	if err := binary.Write(w, binary.BigEndian, p.PermalockStatus); err != nil {
		return errors.Wrap(err, "failed to write PermalockStatus")
	}
	return nil
}

// EncodeFields for Parameter 363, MaximumReceiveSensitivity.
func (p *maximumReceiveSensitivity) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamMaximumReceiveSensitivity,
		data:      p,
		sz:        6,
	}
}
func (p *maximumReceiveSensitivity) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamMaximumReceiveSensitivity")
	}
	return nil
}

// EncodeFields for Parameter 365, RFSurveyFrequencyCapabilities.
func (p *rfSurveyFrequencyCapabilities) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFSurveyFrequencyCapabilities,
		data:      p,
		sz:        12,
	}
}
func (p *rfSurveyFrequencyCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.MinFrequency >> 24), byte(p.MinFrequency >> 16), byte(p.MinFrequency >> 8), byte(p.MinFrequency),
		byte(p.MaxFrequency >> 24), byte(p.MaxFrequency >> 16), byte(p.MaxFrequency >> 8), byte(p.MaxFrequency)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamRFSurveyFrequencyCapabilities")
	}
	return nil
}

// EncodeFields for Parameter 1023, Custom.
func (p *custom) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamCustom,
		data:      p,
		sz:        14 + uint16(len(p.Data)),
	}
}
func (p *custom) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.VendorID >> 24), byte(p.VendorID >> 16), byte(p.VendorID >> 8), byte(p.VendorID),
		byte(p.Subtype >> 24), byte(p.Subtype >> 16), byte(p.Subtype >> 8), byte(p.Subtype)}); err != nil {
		return errors.Wrap(err, "failed to write fields for ParamCustom")
	}
	if _, err := w.Write(p.Data); err != nil {
		return errors.Wrap(err, "failed to write Data")
	}
	return nil
}
