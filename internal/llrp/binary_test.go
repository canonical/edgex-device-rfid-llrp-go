//
// Copyright (C) 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by "generate_param_code.py -i messages.yaml --test-file=binary_test.go --marshal-file=generated_marshal.go --unmarshal-file=generated_unmarshal.go --encode-file=generated_encoder.go"; DO NOT EDIT.
package llrp

import (
	"reflect"
	"testing"
)

// Test Message 46, GetSupportedVersion.
func TestGetSupportedVersion_roundTrip(t *testing.T) {
	m := getSupportedVersion{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getSupportedVersion
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 56, GetSupportedVersionResponse.
func TestGetSupportedVersionResponse_roundTrip(t *testing.T) {
	m := getSupportedVersionResponse{
		CurrentVersion:      Version1_0_1,
		MaxSupportedVersion: Version1_0_1,
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getSupportedVersionResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 47, SetProtocolVersion.
func TestSetProtocolVersion_roundTrip(t *testing.T) {
	m := setProtocolVersion{
		TargetVersion: Version1_0_1,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 setProtocolVersion
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 57, SetProtocolVersionResponse.
func TestSetProtocolVersionResponse_roundTrip(t *testing.T) {
	m := setProtocolVersionResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 setProtocolVersionResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 1, GetReaderCapabilities.
func TestGetReaderCapabilities_roundTrip(t *testing.T) {
	m := getReaderCapabilities{
		ReaderCapabilitiesRequestedData: ReaderCapLLRPCapabilities,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReaderCapabilities
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 11, GetReaderCapabilitiesResponse.
func TestGetReaderCapabilitiesResponse_roundTrip(t *testing.T) {
	m := getReaderCapabilitiesResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReaderCapabilitiesResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 20, AddROSpec.
func TestAddROSpec_roundTrip(t *testing.T) {
	m := addROSpec{
		ROSpec: roSpec{
			ROSpecID:           2147483648,
			Priority:           128,
			ROSpecCurrentState: ROSpecStateInactive,
			ROBoundarySpec: roBoundarySpec{
				ROSpecStartTrigger: roSpecStartTrigger{
					ROSpecStartTriggerType: ROStartTriggerPeriodic,
				},
				ROSpecStopTrigger: roSpecStopTrigger{
					ROSpecStopTriggerType: ROStopTriggerDuration,
					DurationTriggerValue:  uint32(2147483648),
				},
			},
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 addROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 30, AddROSpecResponse.
func TestAddROSpecResponse_roundTrip(t *testing.T) {
	m := addROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 addROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 21, DeleteROSpec.
func TestDeleteROSpec_roundTrip(t *testing.T) {
	m := deleteROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 deleteROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 31, DeleteROSpecResponse.
func TestDeleteROSpecResponse_roundTrip(t *testing.T) {
	m := deleteROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 deleteROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 22, StartROSpec.
func TestStartROSpec_roundTrip(t *testing.T) {
	m := startROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 startROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 32, StartROSpecResponse.
func TestStartROSpecResponse_roundTrip(t *testing.T) {
	m := startROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 startROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 23, StopROSpec.
func TestStopROSpec_roundTrip(t *testing.T) {
	m := stopROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 stopROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 33, StopROSpecResponse.
func TestStopROSpecResponse_roundTrip(t *testing.T) {
	m := stopROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 stopROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 24, EnableROSpec.
func TestEnableROSpec_roundTrip(t *testing.T) {
	m := enableROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 34, EnableROSpecResponse.
func TestEnableROSpecResponse_roundTrip(t *testing.T) {
	m := enableROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 25, DisableROSpec.
func TestDisableROSpec_roundTrip(t *testing.T) {
	m := disableROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 disableROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 35, DisableROSpecResponse.
func TestDisableROSpecResponse_roundTrip(t *testing.T) {
	m := disableROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 disableROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 26, GetROSpecs.
func TestGetROSpecs_roundTrip(t *testing.T) {
	m := getROSpecs{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getROSpecs
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 36, GetROSpecsResponse.
func TestGetROSpecsResponse_roundTrip(t *testing.T) {
	m := getROSpecsResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getROSpecsResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 40, AddAccessSpec.
func TestAddAccessSpec_roundTrip(t *testing.T) {
	m := addAccessSpec{
		AccessSpec: accessSpec{
			AccessSpecID:    2147483648,
			AntennaID:       32768,
			AirProtocolID:   AirProtoEPCGlobalClass1Gen2,
			AccessSpecFlags: 128,
			ROSpecID:        2147483648,
			AccessSpecStopTrigger: accessSpecStopTrigger{
				AccessSpecStopTriggerType: AccessSpecStopTriggerOperationCount,
				OperationCountValue:       32768,
			},
			AccessCommand: accessCommand{
				C1G2TagSpec: c1G2TagSpec{
					TagPattern1: c1G2TargetTag{
						C1G2MemoryBank:     uint8(1),
						MatchFlag:          true,
						MostSignificantBit: 32768,
						TagMaskNumBits:     32,
						TagMask:            []byte{0x0, 0x1, 0x2, 0x3},
						TagDataNumBits:     32,
						TagData:            []byte{0x0, 0x1, 0x2, 0x3},
					},
				},
			},
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 addAccessSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 50, AddAccessSpecResponse.
func TestAddAccessSpecResponse_roundTrip(t *testing.T) {
	m := addAccessSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 addAccessSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 41, DeleteAccessSpec.
func TestDeleteAccessSpec_roundTrip(t *testing.T) {
	m := deleteAccessSpec{
		AccessSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 deleteAccessSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 51, DeleteAccessSpecResponse.
func TestDeleteAccessSpecResponse_roundTrip(t *testing.T) {
	m := deleteAccessSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 deleteAccessSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 42, EnableAccessSpec.
func TestEnableAccessSpec_roundTrip(t *testing.T) {
	m := enableAccessSpec{
		AccessSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableAccessSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 52, EnableAccessSpecResponse.
func TestEnableAccessSpecResponse_roundTrip(t *testing.T) {
	m := enableAccessSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableAccessSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 43, DisableAccessSpec.
func TestDisableAccessSpec_roundTrip(t *testing.T) {
	m := disableAccessSpec{
		AccessSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 disableAccessSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 53, DisableAccessSpecResponse.
func TestDisableAccessSpecResponse_roundTrip(t *testing.T) {
	m := disableAccessSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 disableAccessSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 44, GetAccessSpecs.
func TestGetAccessSpecs_roundTrip(t *testing.T) {
	m := getAccessSpecs{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getAccessSpecs
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 54, GetAccessSpecsResponse.
func TestGetAccessSpecsResponse_roundTrip(t *testing.T) {
	m := getAccessSpecsResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getAccessSpecsResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 45, ClientRequestOp.
func TestClientRequestOp_roundTrip(t *testing.T) {
	m := clientRequestOp{
		TagReportData: tagReportData{
			EPCData: epcData{
				EPCNumBits: 32,
				EPC:        []byte{0x0, 0x1, 0x2, 0x3},
			},
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 clientRequestOp
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 55, ClientRequestOpResponse.
func TestClientRequestOpResponse_roundTrip(t *testing.T) {
	m := clientRequestOpResponse{
		ClientRequestResponse: clientRequestResponse{
			AccessSpecID: 2147483648,
			EPCData: epcData{
				EPCNumBits: 32,
				EPC:        []byte{0x0, 0x1, 0x2, 0x3},
			},
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 clientRequestOpResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 60, GetReport.
func TestGetReport_roundTrip(t *testing.T) {
	m := getReport{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReport
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 61, ROAccessReport.
func TestROAccessReport_roundTrip(t *testing.T) {
	m := roAccessReport{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 roAccessReport
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 62, KeepAlive.
func TestKeepAlive_roundTrip(t *testing.T) {
	m := keepAlive{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 keepAlive
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 72, KeepAliveACK.
func TestKeepAliveACK_roundTrip(t *testing.T) {
	m := keepAliveACK{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 keepAliveACK
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 63, ReaderEventNotification.
func TestReaderEventNotification_roundTrip(t *testing.T) {
	m := readerEventNotification{
		ReaderEventNotificationData: readerEventNotificationData{
			UTCTimestamp: utcTimestamp(uint64(9223372036854775808)),
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 readerEventNotification
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 64, EnableEventsAndReports.
func TestEnableEventsAndReports_roundTrip(t *testing.T) {
	m := enableEventsAndReports{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableEventsAndReports
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 100, ErrorMessage.
func TestErrorMessage_roundTrip(t *testing.T) {
	m := errorMessage{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 errorMessage
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 2, GetReaderConfig.
func TestGetReaderConfig_roundTrip(t *testing.T) {
	m := getReaderConfig{
		AntennaID:                 32768,
		ReaderConfigRequestedData: ReaderConfReqAccessReportSpec,
		GPIPortNum:                32768,
		GPOPortNum:                32768,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReaderConfig
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 12, GetReaderConfigResponse.
func TestGetReaderConfigResponse_roundTrip(t *testing.T) {
	m := getReaderConfigResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReaderConfigResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 3, SetReaderConfig.
func TestSetReaderConfig_roundTrip(t *testing.T) {
	m := setReaderConfig{
		ResetToFactoryDefaults: true,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 setReaderConfig
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 13, SetReaderConfigResponse.
func TestSetReaderConfigResponse_roundTrip(t *testing.T) {
	m := setReaderConfigResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 setReaderConfigResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 14, CloseConnection.
func TestCloseConnection_roundTrip(t *testing.T) {
	m := closeConnection{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 closeConnection
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 4, CloseConnectionResponse.
func TestCloseConnectionResponse_roundTrip(t *testing.T) {
	m := closeConnectionResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 closeConnectionResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 1023, CustomMessage.
func TestCustomMessage_roundTrip(t *testing.T) {
	m := customMessage{
		VendorID:       2147483648,
		MessageSubtype: 128,
		Data:           []byte{128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 customMessage
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, m, m2)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Parameter 1, AntennaID.
func TestAntennaID_roundTrip(t *testing.T) {
	p := antennaID(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 antennaID
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 2, FirstSeenUTC.
func TestFirstSeenUTC_roundTrip(t *testing.T) {
	p := firstSeenUTC(uint64(9223372036854775808))
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 firstSeenUTC
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 3, FirstSeenUptime.
func TestFirstSeenUptime_roundTrip(t *testing.T) {
	p := firstSeenUptime(uint64(9223372036854775808))
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 firstSeenUptime
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 4, LastSeenUTC.
func TestLastSeenUTC_roundTrip(t *testing.T) {
	p := lastSeenUTC(uint64(9223372036854775808))
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 lastSeenUTC
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 5, LastSeenUptime.
func TestLastSeenUptime_roundTrip(t *testing.T) {
	p := lastSeenUptime(uint64(9223372036854775808))
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 lastSeenUptime
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 6, PeakRSSI.
func TestPeakRSSI_roundTrip(t *testing.T) {
	p := peakRSSI(int8(-1))
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 peakRSSI
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 7, ChannelIndex.
func TestChannelIndex_roundTrip(t *testing.T) {
	p := channelIndex(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 channelIndex
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 8, TagSeenCount.
func TestTagSeenCount_roundTrip(t *testing.T) {
	p := tagSeenCount(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 tagSeenCount
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 9, ROSpecID.
func TestROSpecID_roundTrip(t *testing.T) {
	p := roSpecID(2147483648)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 roSpecID
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 10, InventoryParameterSpecID.
func TestInventoryParameterSpecID_roundTrip(t *testing.T) {
	p := inventoryParameterSpecID(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 inventoryParameterSpecID
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 11, C1G2CRC.
func TestC1G2CRC_roundTrip(t *testing.T) {
	p := c1G2CRC(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2CRC
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 12, C1G2PC.
func TestC1G2PC_roundTrip(t *testing.T) {
	p := c1G2PC(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2PC
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 13, EPC96.
func TestEPC96_roundTrip(t *testing.T) {
	p := epc96{
		EPC: []byte{128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 epc96
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 14, SpecIndex.
func TestSpecIndex_roundTrip(t *testing.T) {
	p := specIndex(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 specIndex
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 15, ClientRequestOpSpecResult.
func TestClientRequestOpSpecResult_roundTrip(t *testing.T) {
	p := clientRequestOpSpecResult(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 clientRequestOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 16, AccessSpecID.
func TestAccessSpecID_roundTrip(t *testing.T) {
	p := accessSpecID(2147483648)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 accessSpecID
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 17, OpSpecID.
func TestOpSpecID_roundTrip(t *testing.T) {
	p := opSpecID(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 opSpecID
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 18, C1G2SingulationDetails.
func TestC1G2SingulationDetails_roundTrip(t *testing.T) {
	p := c1G2SingulationDetails{
		NumCollisionSlots: 32768,
		NumEmptySlots:     32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2SingulationDetails
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 19, C1G2XPCW1.
func TestC1G2XPCW1_roundTrip(t *testing.T) {
	p := c1G2XPCW1(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2XPCW1
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 20, C1G2XPCW2.
func TestC1G2XPCW2_roundTrip(t *testing.T) {
	p := c1G2XPCW2(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2XPCW2
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 128, UTCTimestamp.
func TestUTCTimestamp_roundTrip(t *testing.T) {
	p := utcTimestamp(uint64(9223372036854775808))
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 utcTimestamp
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 129, Uptime.
func TestUptime_roundTrip(t *testing.T) {
	p := uptime(uint64(9223372036854775808))
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 uptime
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 137, GeneralDeviceCapabilities.
func TestGeneralDeviceCapabilities_roundTrip(t *testing.T) {
	p := generalDeviceCapabilities{
		MaxSupportedAntennas:    32768,
		CanSetAntennaProperties: true,
		HasUTCClockCapability:   true,
		DeviceManufacturerName:  2147483648,
		ModelName:               2147483648,
		ReaderFirmwareVersion:   "some arbitrary string",
		ReceiveSensitivityTableEntries: []receiveSensitivityTableEntry{
			{
				TableIndex:         32768,
				ReceiveSensitivity: uint16(32768),
			},
		},
		GPIOCapabilities: gpioCapabilities{
			NumGPIs: 32768,
			NumGPOs: 32768,
		},
		PerAntennaAirProtocols: []perAntennaAirProtocol{
			{
				AntennaID:      32768,
				AirProtocolIDs: []AirProtocolIDType{AirProtoEPCGlobalClass1Gen2, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2},
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 generalDeviceCapabilities
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 139, ReceiveSensitivityTableEntry.
func TestReceiveSensitivityTableEntry_roundTrip(t *testing.T) {
	p := receiveSensitivityTableEntry{
		TableIndex:         32768,
		ReceiveSensitivity: uint16(32768),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 receiveSensitivityTableEntry
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 140, PerAntennaAirProtocol.
func TestPerAntennaAirProtocol_roundTrip(t *testing.T) {
	p := perAntennaAirProtocol{
		AntennaID:      32768,
		AirProtocolIDs: []AirProtocolIDType{AirProtoEPCGlobalClass1Gen2, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2, AirProtoUnspecified, AirProtoEPCGlobalClass1Gen2},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 perAntennaAirProtocol
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 141, GPIOCapabilities.
func TestGPIOCapabilities_roundTrip(t *testing.T) {
	p := gpioCapabilities{
		NumGPIs: 32768,
		NumGPOs: 32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 gpioCapabilities
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 142, LLRPCapabilities.
func TestLLRPCapabilities_roundTrip(t *testing.T) {
	p := llrpCapabilities{
		LLRPCapabilitiesFlags:                  2,
		MaxPriorityLevelSupported:              128,
		ClientRequestedOpSpecTimeout:           32768,
		MaxNumROSpecs:                          2147483648,
		MaxNumSpecsPerROSpec:                   2147483648,
		MaxNumInventoryParameterSpecsPerAISpec: 2147483648,
		MaxNumAccessSpecs:                      2147483648,
		MaxNumOpSpecsPerAccessSpec:             2147483648,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 llrpCapabilities
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 143, RegulatoryCapabilities.
func TestRegulatoryCapabilities_roundTrip(t *testing.T) {
	p := regulatoryCapabilities{
		CountryCode:            0,
		CommunicationsStandard: 32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 regulatoryCapabilities
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 144, UHFBandCapabilities.
func TestUHFBandCapabilities_roundTrip(t *testing.T) {
	p := uhfBandCapabilities{
		TransmitPowerLevelTableEntry: []transmitPowerLevelTableEntry{
			{
				Index:              32768,
				TransmitPowerValue: uint16(32768),
			},
		},
		FrequencyInformation: []frequencyInformation{
			{
				HoppingFlags: 0,
			},
		},
		UHFC1G2RFModeTable: []uhfc1G2RFModeTable{
			{
				UHFC1G2RFModeTableEntry: []uhfc1G2RFModeTableEntry{
					{
						ModeID:                     2147483648,
						UHFC1G2RFModeFlags:         128,
						BackscatterDataRate:        uint32(2147483648),
						Modulation:                 0,
						ForwardLinkModulation:      0,
						PulseIntervalEncodingRatio: 2147483648,
						MinTariTime:                uint32(2147483648),
						MaxTariTime:                uint32(2147483648),
						StepTariTime:               uint32(2147483648),
						SpectralMask:               0,
					},
				},
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 uhfBandCapabilities
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 145, TransmitPowerLevelTableEntry.
func TestTransmitPowerLevelTableEntry_roundTrip(t *testing.T) {
	p := transmitPowerLevelTableEntry{
		Index:              32768,
		TransmitPowerValue: uint16(32768),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 transmitPowerLevelTableEntry
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 146, FrequencyInformation.
func TestFrequencyInformation_roundTrip(t *testing.T) {
	p := frequencyInformation{
		HoppingFlags: 0,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 frequencyInformation
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 147, FrequencyHopTable.
func TestFrequencyHopTable_roundTrip(t *testing.T) {
	p := frequencyHopTable{
		HopTableID:  128,
		Frequencies: []kHz{uint32(2147483648), uint32(1), uint32(2), uint32(3)},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 frequencyHopTable
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 148, FixedFrequencyTable.
func TestFixedFrequencyTable_roundTrip(t *testing.T) {
	p := fixedFrequencyTable{
		Frequencies: []kHz{uint32(2147483648), uint32(1), uint32(2), uint32(3)},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 fixedFrequencyTable
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 149, PerAntennaReceiveSensitivityRange.
func TestPerAntennaReceiveSensitivityRange_roundTrip(t *testing.T) {
	p := perAntennaReceiveSensitivityRange{
		AntennaID:                  32768,
		ReceiveSensitivityIndexMin: 32768,
		ReceiveSensitivityIndexMax: 32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 perAntennaReceiveSensitivityRange
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 177, ROSpec.
func TestROSpec_roundTrip(t *testing.T) {
	p := roSpec{
		ROSpecID:           2147483648,
		Priority:           128,
		ROSpecCurrentState: ROSpecStateInactive,
		ROBoundarySpec: roBoundarySpec{
			ROSpecStartTrigger: roSpecStartTrigger{
				ROSpecStartTriggerType: ROStartTriggerPeriodic,
			},
			ROSpecStopTrigger: roSpecStopTrigger{
				ROSpecStopTriggerType: ROStopTriggerDuration,
				DurationTriggerValue:  uint32(2147483648),
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 roSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 178, ROBoundarySpec.
func TestROBoundarySpec_roundTrip(t *testing.T) {
	p := roBoundarySpec{
		ROSpecStartTrigger: roSpecStartTrigger{
			ROSpecStartTriggerType: ROStartTriggerPeriodic,
		},
		ROSpecStopTrigger: roSpecStopTrigger{
			ROSpecStopTriggerType: ROStopTriggerDuration,
			DurationTriggerValue:  uint32(2147483648),
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 roBoundarySpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 179, ROSpecStartTrigger.
func TestROSpecStartTrigger_roundTrip(t *testing.T) {
	p := roSpecStartTrigger{
		ROSpecStartTriggerType: ROStartTriggerPeriodic,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 roSpecStartTrigger
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 180, PeriodicTriggerValue.
func TestPeriodicTriggerValue_roundTrip(t *testing.T) {
	p := periodicTriggerValue{
		Offset: uint32(2147483648),
		Period: uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 periodicTriggerValue
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 181, GPITriggerValue.
func TestGPITriggerValue_roundTrip(t *testing.T) {
	p := gpiTriggerValue{
		GPIPortNum:      32768,
		GPITriggerFlags: 0,
		Timeout:         uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 gpiTriggerValue
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 182, ROSpecStopTrigger.
func TestROSpecStopTrigger_roundTrip(t *testing.T) {
	p := roSpecStopTrigger{
		ROSpecStopTriggerType: ROStopTriggerDuration,
		DurationTriggerValue:  uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 roSpecStopTrigger
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 183, AISpec.
func TestAISpec_roundTrip(t *testing.T) {
	p := aiSpec{
		AntennaID: []uint16{32768, 1, 2, 3},
		AISpecStopTrigger: aiSpecStopTrigger{
			AISpecStopTriggerType: AIStopTriggerGPI,
			DurationTriggerValue:  uint32(2147483648),
		},
		InventoryParameterSpec: []inventoryParameterSpec{
			{
				InventoryParameterSpecID: 32768,
				AirProtocolID:            AirProtoEPCGlobalClass1Gen2,
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 aiSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 184, AISpecStopTrigger.
func TestAISpecStopTrigger_roundTrip(t *testing.T) {
	p := aiSpecStopTrigger{
		AISpecStopTriggerType: AIStopTriggerGPI,
		DurationTriggerValue:  uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 aiSpecStopTrigger
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 185, TagObservationTrigger.
func TestTagObservationTrigger_roundTrip(t *testing.T) {
	p := tagObservationTrigger{
		TagObservationTriggerType: TagObsTriggerNAttempts,
		NumberofTags:              32768,
		NumberofAttempts:          32768,
		T:                         uint16(32768),
		Timeout:                   uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 tagObservationTrigger
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 186, InventoryParameterSpec.
func TestInventoryParameterSpec_roundTrip(t *testing.T) {
	p := inventoryParameterSpec{
		InventoryParameterSpecID: 32768,
		AirProtocolID:            AirProtoEPCGlobalClass1Gen2,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 inventoryParameterSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 187, RFSurveySpec.
func TestRFSurveySpec_roundTrip(t *testing.T) {
	p := rfSurveySpec{
		AntennaID:      32768,
		StartFrequency: uint32(2147483648),
		EndFrequency:   uint32(2147483648),
		RFSurveySpecStopTrigger: rfSurveySpecStopTrigger{
			RFSurveySpecStopTriggerType: RFSurveyStopTriggerDuration,
			Duration:                    uint32(2147483648),
			N:                           uint32(2147483648),
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 rfSurveySpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 188, RFSurveySpecStopTrigger.
func TestRFSurveySpecStopTrigger_roundTrip(t *testing.T) {
	p := rfSurveySpecStopTrigger{
		RFSurveySpecStopTriggerType: RFSurveyStopTriggerDuration,
		Duration:                    uint32(2147483648),
		N:                           uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 rfSurveySpecStopTrigger
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 207, AccessSpec.
func TestAccessSpec_roundTrip(t *testing.T) {
	p := accessSpec{
		AccessSpecID:    2147483648,
		AntennaID:       32768,
		AirProtocolID:   AirProtoEPCGlobalClass1Gen2,
		AccessSpecFlags: 128,
		ROSpecID:        2147483648,
		AccessSpecStopTrigger: accessSpecStopTrigger{
			AccessSpecStopTriggerType: AccessSpecStopTriggerOperationCount,
			OperationCountValue:       32768,
		},
		AccessCommand: accessCommand{
			C1G2TagSpec: c1G2TagSpec{
				TagPattern1: c1G2TargetTag{
					C1G2MemoryBank:     uint8(1),
					MatchFlag:          true,
					MostSignificantBit: 32768,
					TagMaskNumBits:     32,
					TagMask:            []byte{0x0, 0x1, 0x2, 0x3},
					TagDataNumBits:     32,
					TagData:            []byte{0x0, 0x1, 0x2, 0x3},
				},
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 accessSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 208, AccessSpecStopTrigger.
func TestAccessSpecStopTrigger_roundTrip(t *testing.T) {
	p := accessSpecStopTrigger{
		AccessSpecStopTriggerType: AccessSpecStopTriggerOperationCount,
		OperationCountValue:       32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 accessSpecStopTrigger
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 209, AccessCommand.
func TestAccessCommand_roundTrip(t *testing.T) {
	p := accessCommand{
		C1G2TagSpec: c1G2TagSpec{
			TagPattern1: c1G2TargetTag{
				C1G2MemoryBank:     uint8(1),
				MatchFlag:          true,
				MostSignificantBit: 32768,
				TagMaskNumBits:     32,
				TagMask:            []byte{0x0, 0x1, 0x2, 0x3},
				TagDataNumBits:     32,
				TagData:            []byte{0x0, 0x1, 0x2, 0x3},
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 accessCommand
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 210, ClientRequestOpSpec.
func TestClientRequestOpSpec_roundTrip(t *testing.T) {
	p := clientRequestOpSpec(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 clientRequestOpSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 211, ClientRequestResponse.
func TestClientRequestResponse_roundTrip(t *testing.T) {
	p := clientRequestResponse{
		AccessSpecID: 2147483648,
		EPCData: epcData{
			EPCNumBits: 32,
			EPC:        []byte{0x0, 0x1, 0x2, 0x3},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 clientRequestResponse
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 217, LLRPConfigurationStateValue.
func TestLLRPConfigurationStateValue_roundTrip(t *testing.T) {
	p := llrpConfigurationStateValue(2147483648)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 llrpConfigurationStateValue
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 218, Identification.
func TestIdentification_roundTrip(t *testing.T) {
	p := identification{
		IDType:   IDEPC,
		ReaderID: []byte{128, 1, 2, 3, 4, 5, 6, 7},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 identification
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 219, GPOWriteData.
func TestGPOWriteData_roundTrip(t *testing.T) {
	p := gpoWriteData{
		GPOPort: 32768,
		GPOData: true,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 gpoWriteData
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 220, KeepAliveSpec.
func TestKeepAliveSpec_roundTrip(t *testing.T) {
	p := keepAliveSpec{
		KeepAliveTriggerType: KATriggerPeriodic,
		Interval:             uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 keepAliveSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 221, AntennaProperties.
func TestAntennaProperties_roundTrip(t *testing.T) {
	p := antennaProperties{
		AntennaConnected: true,
		AntennaID:        32768,
		AntennaGain:      uint16(32768),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 antennaProperties
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 222, AntennaConfiguration.
func TestAntennaConfiguration_roundTrip(t *testing.T) {
	p := antennaConfiguration{
		AntennaID: 32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 antennaConfiguration
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 223, RFReceiver.
func TestRFReceiver_roundTrip(t *testing.T) {
	p := rfReceiver(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 rfReceiver
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 224, RFTransmitter.
func TestRFTransmitter_roundTrip(t *testing.T) {
	p := rfTransmitter{
		HopTableID:                        32768,
		ChannelIndexInFixedFrequencyTable: 32768,
		TransmitPowerTableIndex:           32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 rfTransmitter
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 225, GPIPortCurrentState.
func TestGPIPortCurrentState_roundTrip(t *testing.T) {
	p := gpiPortCurrentState{
		GPIPort:        32768,
		GPIPortEnabled: true,
		GPIState:       GPIStateHigh,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 gpiPortCurrentState
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 226, EventsAndReports.
func TestEventsAndReports_roundTrip(t *testing.T) {
	p := eventsAndReports(true)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 eventsAndReports
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 237, ROReportSpec.
func TestROReportSpec_roundTrip(t *testing.T) {
	p := roReportSpec{
		ROReportTriggerType: 0,
		N:                   32768,
		TagReportContentSelector: tagReportContentSelector{
			EnableROSpecID:             true,
			EnableSpecIndex:            true,
			EnableInventoryParamSpecID: true,
			EnableAntennaID:            true,
			EnableChannelIndex:         true,
			EnablePeakRSSI:             true,
			EnableFirstSeenTimestamp:   true,
			EnableLastSeenTimestamp:    true,
			EnableTagSeenCount:         true,
			EnableAccessSpecID:         true,
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 roReportSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 238, TagReportContentSelector.
func TestTagReportContentSelector_roundTrip(t *testing.T) {
	p := tagReportContentSelector{
		EnableROSpecID:             true,
		EnableSpecIndex:            true,
		EnableInventoryParamSpecID: true,
		EnableAntennaID:            true,
		EnableChannelIndex:         true,
		EnablePeakRSSI:             true,
		EnableFirstSeenTimestamp:   true,
		EnableLastSeenTimestamp:    true,
		EnableTagSeenCount:         true,
		EnableAccessSpecID:         true,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 tagReportContentSelector
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 239, AccessReportSpec.
func TestAccessReportSpec_roundTrip(t *testing.T) {
	p := accessReportSpec(0)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 accessReportSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 240, TagReportData.
func TestTagReportData_roundTrip(t *testing.T) {
	p := tagReportData{
		EPCData: epcData{
			EPCNumBits: 32,
			EPC:        []byte{0x0, 0x1, 0x2, 0x3},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 tagReportData
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 241, EPCData.
func TestEPCData_roundTrip(t *testing.T) {
	p := epcData{
		EPCNumBits: 32,
		EPC:        []byte{0x0, 0x1, 0x2, 0x3},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 epcData
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 242, RFSurveyReportData.
func TestRFSurveyReportData_roundTrip(t *testing.T) {
	p := rfSurveyReportData{
		FrequencyRSSILevelEntry: []frequencyRSSILevelEntry{
			{
				Frequency:    uint32(2147483648),
				Bandwidth:    uint32(2147483648),
				AverageRSSI:  int8(-1),
				PeakRSSI:     int8(-1),
				UTCTimestamp: utcTimestamp(uint64(9223372036854775808)),
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 rfSurveyReportData
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 243, FrequencyRSSILevelEntry.
func TestFrequencyRSSILevelEntry_roundTrip(t *testing.T) {
	p := frequencyRSSILevelEntry{
		Frequency:    uint32(2147483648),
		Bandwidth:    uint32(2147483648),
		AverageRSSI:  int8(-1),
		PeakRSSI:     int8(-1),
		UTCTimestamp: utcTimestamp(uint64(9223372036854775808)),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 frequencyRSSILevelEntry
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 244, ReaderEventNotificationSpec.
func TestReaderEventNotificationSpec_roundTrip(t *testing.T) {
	p := readerEventNotificationSpec{
		EventNotificationState: []eventNotificationState{
			{
				ReaderEventType:     0,
				NotificationEnabled: true,
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 readerEventNotificationSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 245, EventNotificationState.
func TestEventNotificationState_roundTrip(t *testing.T) {
	p := eventNotificationState{
		ReaderEventType:     0,
		NotificationEnabled: true,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 eventNotificationState
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 246, ReaderEventNotificationData.
func TestReaderEventNotificationData_roundTrip(t *testing.T) {
	p := readerEventNotificationData{
		UTCTimestamp: utcTimestamp(uint64(9223372036854775808)),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 readerEventNotificationData
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 247, HoppingEvent.
func TestHoppingEvent_roundTrip(t *testing.T) {
	p := hoppingEvent(32768)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 hoppingEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 248, GPIEvent.
func TestGPIEvent_roundTrip(t *testing.T) {
	p := gpiEvent{
		GPIPort:  32768,
		GPIEvent: true,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 gpiEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 249, ROSpecEvent.
func TestROSpecEvent_roundTrip(t *testing.T) {
	p := roSpecEvent{
		ROSpecEventType:    0,
		ROSpecID:           2147483648,
		PreemptingROSpecID: 2147483648,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 roSpecEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 250, ReportBufferLevelWarningEvent.
func TestReportBufferLevelWarningEvent_roundTrip(t *testing.T) {
	p := reportBufferLevelWarningEvent(128)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 reportBufferLevelWarningEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 251, ReportBufferOverflowErrorEvent.
func TestReportBufferOverflowErrorEvent_roundTrip(t *testing.T) {
	p := reportBufferOverflowErrorEvent{}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 reportBufferOverflowErrorEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 252, ReaderExceptionEvent.
func TestReaderExceptionEvent_roundTrip(t *testing.T) {
	p := readerExceptionEvent{
		Message: "some arbitrary string",
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 readerExceptionEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 253, RFSurveyEvent.
func TestRFSurveyEvent_roundTrip(t *testing.T) {
	p := rfSurveyEvent{
		RFSurveyEventType: 0,
		ROSpecID:          2147483648,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 rfSurveyEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 254, AISpecEvent.
func TestAISpecEvent_roundTrip(t *testing.T) {
	p := aiSpecEvent{
		AISpecEventType: 0,
		ROSpecID:        2147483648,
		SpecIndex:       32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 aiSpecEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 255, AntennaEvent.
func TestAntennaEvent_roundTrip(t *testing.T) {
	p := antennaEvent{
		AntennaEventType: 0,
		AntennaID:        32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 antennaEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 256, ConnectionAttemptEvent.
func TestConnectionAttemptEvent_roundTrip(t *testing.T) {
	p := connectionAttemptEvent(ConnExistsClientInitiated)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 connectionAttemptEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 257, ConnectionCloseEvent.
func TestConnectionCloseEvent_roundTrip(t *testing.T) {
	p := connectionCloseEvent{}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 connectionCloseEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 287, LLRPStatus.
func TestLLRPStatus_roundTrip(t *testing.T) {
	p := llrpStatus{
		Status:           StatusMsgMsgUnexpected,
		ErrorDescription: "some arbitrary string",
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 llrpStatus
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 288, FieldError.
func TestFieldError_roundTrip(t *testing.T) {
	p := fieldError{
		FieldIndex: 32768,
		ErrorCode:  StatusMsgMsgUnexpected,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 fieldError
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 289, ParameterError.
func TestParameterError_roundTrip(t *testing.T) {
	p := parameterError{
		ParameterType: 32768,
		ErrorCode:     StatusMsgMsgUnexpected,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 parameterError
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 327, C1G2LLRPCapabilities.
func TestC1G2LLRPCapabilities_roundTrip(t *testing.T) {
	p := c1G2LLRPCapabilities{
		C1G2CapabilitiesFlags:       128,
		MaxNumSelectFiltersPerQuery: 32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2LLRPCapabilities
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 328, UHFC1G2RFModeTable.
func TestUHFC1G2RFModeTable_roundTrip(t *testing.T) {
	p := uhfc1G2RFModeTable{
		UHFC1G2RFModeTableEntry: []uhfc1G2RFModeTableEntry{
			{
				ModeID:                     2147483648,
				UHFC1G2RFModeFlags:         128,
				BackscatterDataRate:        uint32(2147483648),
				Modulation:                 0,
				ForwardLinkModulation:      0,
				PulseIntervalEncodingRatio: 2147483648,
				MinTariTime:                uint32(2147483648),
				MaxTariTime:                uint32(2147483648),
				StepTariTime:               uint32(2147483648),
				SpectralMask:               0,
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 uhfc1G2RFModeTable
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 329, UHFC1G2RFModeTableEntry.
func TestUHFC1G2RFModeTableEntry_roundTrip(t *testing.T) {
	p := uhfc1G2RFModeTableEntry{
		ModeID:                     2147483648,
		UHFC1G2RFModeFlags:         128,
		BackscatterDataRate:        uint32(2147483648),
		Modulation:                 0,
		ForwardLinkModulation:      0,
		PulseIntervalEncodingRatio: 2147483648,
		MinTariTime:                uint32(2147483648),
		MaxTariTime:                uint32(2147483648),
		StepTariTime:               uint32(2147483648),
		SpectralMask:               0,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 uhfc1G2RFModeTableEntry
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 330, C1G2InventoryCommand.
func TestC1G2InventoryCommand_roundTrip(t *testing.T) {
	p := c1G2InventoryCommand{
		C1G2InventoryCommandFlags: 128,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2InventoryCommand
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 331, C1G2Filter.
func TestC1G2Filter_roundTrip(t *testing.T) {
	p := c1G2Filter{
		C1G2FilterAction: 0,
		C1G2TagInventoryMask: c1G2TagInventoryMask{
			C1G2MemoryBank:     uint8(1),
			MostSignificantBit: 32768,
			TagMaskNumBits:     32,
			TagMask:            []byte{0x0, 0x1, 0x2, 0x3},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2Filter
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 332, C1G2TagInventoryMask.
func TestC1G2TagInventoryMask_roundTrip(t *testing.T) {
	p := c1G2TagInventoryMask{
		C1G2MemoryBank:     uint8(1),
		MostSignificantBit: 32768,
		TagMaskNumBits:     32,
		TagMask:            []byte{0x0, 0x1, 0x2, 0x3},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2TagInventoryMask
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 333, C1G2TagInventoryStateAwareFilterAction.
func TestC1G2TagInventoryStateAwareFilterAction_roundTrip(t *testing.T) {
	p := c1G2TagInventoryStateAwareFilterAction{
		C1G2TagInventoryTarget:                 0,
		C1G2TagInventoryStateAwareFilterAction: 0,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2TagInventoryStateAwareFilterAction
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 334, C1G2TagInventoryStateUnawareFilterAction.
func TestC1G2TagInventoryStateUnawareFilterAction_roundTrip(t *testing.T) {
	p := c1G2TagInventoryStateUnawareFilterAction(0)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2TagInventoryStateUnawareFilterAction
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 335, C1G2RFControl.
func TestC1G2RFControl_roundTrip(t *testing.T) {
	p := c1G2RFControl{
		IndexIntoUHFC1G2RFModeTable: 32768,
		Tari:                        uint16(32768),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2RFControl
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 336, C1G2SingulationControl.
func TestC1G2SingulationControl_roundTrip(t *testing.T) {
	p := c1G2SingulationControl{
		C1G2SingulationControlSession: 0,
		TagPopulation:                 32768,
		TagTransitTime:                uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2SingulationControl
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 337, C1G2TagInventoryStateAwareSingulationAction.
func TestC1G2TagInventoryStateAwareSingulationAction_roundTrip(t *testing.T) {
	p := c1G2TagInventoryStateAwareSingulationAction(128)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2TagInventoryStateAwareSingulationAction
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 338, C1G2TagSpec.
func TestC1G2TagSpec_roundTrip(t *testing.T) {
	p := c1G2TagSpec{
		TagPattern1: c1G2TargetTag{
			C1G2MemoryBank:     uint8(1),
			MatchFlag:          true,
			MostSignificantBit: 32768,
			TagMaskNumBits:     32,
			TagMask:            []byte{0x0, 0x1, 0x2, 0x3},
			TagDataNumBits:     32,
			TagData:            []byte{0x0, 0x1, 0x2, 0x3},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2TagSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 339, C1G2TargetTag.
func TestC1G2TargetTag_roundTrip(t *testing.T) {
	p := c1G2TargetTag{
		C1G2MemoryBank:     uint8(1),
		MatchFlag:          true,
		MostSignificantBit: 32768,
		TagMaskNumBits:     32,
		TagMask:            []byte{0x0, 0x1, 0x2, 0x3},
		TagDataNumBits:     32,
		TagData:            []byte{0x0, 0x1, 0x2, 0x3},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2TargetTag
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 341, C1G2Read.
func TestC1G2Read_roundTrip(t *testing.T) {
	p := c1G2Read{
		OpSpecID:       32768,
		AccessPassword: 2147483648,
		C1G2MemoryBank: uint8(1),
		WordAddress:    32768,
		WordCount:      32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2Read
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 342, C1G2Write.
func TestC1G2Write_roundTrip(t *testing.T) {
	p := c1G2Write{
		OpSpecID:       32768,
		AccessPassword: 2147483648,
		C1G2MemoryBank: uint8(1),
		WordAddress:    32768,
		Data:           []uint16{32768, 1, 2, 3},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2Write
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 343, C1G2Kill.
func TestC1G2Kill_roundTrip(t *testing.T) {
	p := c1G2Kill{
		OpSpecID:     32768,
		KillPassword: 2147483648,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2Kill
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 344, C1G2Lock.
func TestC1G2Lock_roundTrip(t *testing.T) {
	p := c1G2Lock{
		OpSpecID:       32768,
		AccessPassword: 2147483648,
		C1G2LockPayload: []c1G2LockPayload{
			{
				LockPrivilege: 0,
				LockData:      0,
			},
		},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2Lock
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 345, C1G2LockPayload.
func TestC1G2LockPayload_roundTrip(t *testing.T) {
	p := c1G2LockPayload{
		LockPrivilege: 0,
		LockData:      0,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2LockPayload
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 346, C1G2BlockErase.
func TestC1G2BlockErase_roundTrip(t *testing.T) {
	p := c1G2BlockErase{
		OpSpecID:       32768,
		AccessPassword: 2147483648,
		C1G2MemoryBank: uint8(1),
		WordAddress:    32768,
		WordCount:      32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2BlockErase
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 347, C1G2BlockWrite.
func TestC1G2BlockWrite_roundTrip(t *testing.T) {
	p := c1G2BlockWrite{
		OpSpecID:       32768,
		AccessPassword: 2147483648,
		C1G2MemoryBank: uint8(1),
		WordAddress:    32768,
		Data:           []uint16{32768, 1, 2, 3},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2BlockWrite
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 348, C1G2EPCMemorySelector.
func TestC1G2EPCMemorySelector_roundTrip(t *testing.T) {
	p := c1G2EPCMemorySelector(128)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2EPCMemorySelector
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 349, C1G2ReadOpSpecResult.
func TestC1G2ReadOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2ReadOpSpecResult{
		C1G2ReadOpSpecResultType: 0,
		OpSpecID:                 32768,
		Data:                     []uint16{32768, 1, 2, 3},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2ReadOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 350, C1G2WriteOpSpecResult.
func TestC1G2WriteOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2WriteOpSpecResult{
		C1G2WriteOpSpecResultType: 0,
		OpSpecID:                  32768,
		WordsWritten:              32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2WriteOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 351, C1G2KillOpSpecResult.
func TestC1G2KillOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2KillOpSpecResult{
		C1G2KillResult: 0,
		OpSpecID:       32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2KillOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 352, C1G2LockOpSpecResult.
func TestC1G2LockOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2LockOpSpecResult{
		C1G2LockResult: 0,
		OpSpecID:       32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2LockOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 353, C1G2BlockEraseOpSpecResult.
func TestC1G2BlockEraseOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2BlockEraseOpSpecResult{
		C1G2BlockEraseResult: 0,
		OpSpecID:             32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2BlockEraseOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 354, C1G2BlockWriteOpSpecResult.
func TestC1G2BlockWriteOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2BlockWriteOpSpecResult{
		C1G2BlockWriteResult: 0,
		OpSpecID:             32768,
		WordsWritten:         32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2BlockWriteOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 355, LoopSpec.
func TestLoopSpec_roundTrip(t *testing.T) {
	p := loopSpec(2147483648)
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 loopSpec
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 356, SpecLoopEvent.
func TestSpecLoopEvent_roundTrip(t *testing.T) {
	p := specLoopEvent{
		ROSpecID:  2147483648,
		LoopCount: 2147483648,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 specLoopEvent
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 357, C1G2Recommission.
func TestC1G2Recommission_roundTrip(t *testing.T) {
	p := c1G2Recommission{
		OpSpecID:              32768,
		KillPassword:          2147483648,
		C1G2RecommissionFlags: 128,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2Recommission
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 358, C1G2BlockPermalock.
func TestC1G2BlockPermalock_roundTrip(t *testing.T) {
	p := c1G2BlockPermalock{
		OpSpecID:       32768,
		AccessPassword: 2147483648,
		C1G2MemoryBank: uint8(1),
		BlockAddress:   32768,
		BlockMask:      []uint16{32768, 1, 2, 3},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2BlockPermalock
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 359, C1G2GetBlockPermalockStatus.
func TestC1G2GetBlockPermalockStatus_roundTrip(t *testing.T) {
	p := c1G2GetBlockPermalockStatus{
		OpSpecID:       32768,
		AccessPassword: 2147483648,
		C1G2MemoryBank: uint8(1),
		BlockAddress:   32768,
		BlockRange:     32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2GetBlockPermalockStatus
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 360, C1G2RecommissionOpSpecResult.
func TestC1G2RecommissionOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2RecommissionOpSpecResult{
		C1G2RecommissionResult: 0,
		OpSpecID:               32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2RecommissionOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 361, C1G2BlockPermalockOpSpecResult.
func TestC1G2BlockPermalockOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2BlockPermalockOpSpecResult{
		C1G2BlockPermalockResult: C1G2BPLockNoResponseFromTag,
		OpSpecID:                 32768,
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2BlockPermalockOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 362, C1G2GetBlockPermalockStatusOpSpecResult.
func TestC1G2GetBlockPermalockStatusOpSpecResult_roundTrip(t *testing.T) {
	p := c1G2GetBlockPermalockStatusOpSpecResult{
		C1G2GetBlockPermalockStatusResult: 0,
		OpSpecID:                          32768,
		PermalockStatus:                   []uint16{32768, 1, 2, 3},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 c1G2GetBlockPermalockStatusOpSpecResult
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 363, MaximumReceiveSensitivity.
func TestMaximumReceiveSensitivity_roundTrip(t *testing.T) {
	p := maximumReceiveSensitivity(int16(-1))
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 maximumReceiveSensitivity
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 365, RFSurveyFrequencyCapabilities.
func TestRFSurveyFrequencyCapabilities_roundTrip(t *testing.T) {
	p := rfSurveyFrequencyCapabilities{
		MinFrequency: uint32(2147483648),
		MaxFrequency: uint32(2147483648),
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 rfSurveyFrequencyCapabilities
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}

// Test Parameter 1023, Custom.
func TestCustom_roundTrip(t *testing.T) {
	p := custom{
		VendorID: 2147483648,
		Subtype:  2147483648,
		Data:     []byte{128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19},
	}
	b, err := p.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var p2 custom
	if err := p2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v\n%# 02x\n%+v\n%+v", err, b, p, p2)
	}
	if !reflect.DeepEqual(p, p2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, p, p2)
	}
}
