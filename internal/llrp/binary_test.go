//
// Copyright (C) 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by "generate_param_code.py -i messages.yaml --test-file=binary_test.go --marshal-file=generated_marshal.go --unmarshal-file=generated_unmarshal.go --encode-file=generated_encoder.go"; DO NOT EDIT.
package llrp

import (
	"reflect"
	"testing"
)

// Test Message 46, GetSupportedVersion.
func TestGetSupportedVersion_roundTrip(t *testing.T) {
	m := getSupportedVersion{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getSupportedVersion
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 56, GetSupportedVersionResponse.
func TestGetSupportedVersionResponse_roundTrip(t *testing.T) {
	m := getSupportedVersionResponse{
		CurrentVersion:      Version1_0_1,
		MaxSupportedVersion: Version1_0_1,
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getSupportedVersionResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 47, SetProtocolVersion.
func TestSetProtocolVersion_roundTrip(t *testing.T) {
	m := setProtocolVersion{
		TargetVersion: Version1_0_1,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 setProtocolVersion
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 57, SetProtocolVersionResponse.
func TestSetProtocolVersionResponse_roundTrip(t *testing.T) {
	m := setProtocolVersionResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 setProtocolVersionResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 1, GetReaderCapabilities.
func TestGetReaderCapabilities_roundTrip(t *testing.T) {
	m := getReaderCapabilities{
		ReaderCapabilitiesRequestedData: ReaderCapLLRPCapabilities,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReaderCapabilities
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 11, GetReaderCapabilitiesResponse.
func TestGetReaderCapabilitiesResponse_roundTrip(t *testing.T) {
	m := getReaderCapabilitiesResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReaderCapabilitiesResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 20, AddROSpec.
func TestAddROSpec_roundTrip(t *testing.T) {
	m := addROSpec{
		ROSpec: roSpec{
			ROSpecID:           2147483648,
			Priority:           128,
			ROSpecCurrentState: ROSpecStateInactive,
			ROBoundarySpec: roBoundarySpec{
				ROSpecStartTrigger: roSpecStartTrigger{
					ROSpecStartTriggerType: ROStartTriggerPeriodic,
				},
				ROSpecStopTrigger: roSpecStopTrigger{
					ROSpecStopTriggerType: ROStopTriggerDuration,
					DurationTriggerValue:  uint32(2147483648),
				},
			},
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 addROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 30, AddROSpecResponse.
func TestAddROSpecResponse_roundTrip(t *testing.T) {
	m := addROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 addROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 21, DeleteROSpec.
func TestDeleteROSpec_roundTrip(t *testing.T) {
	m := deleteROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 deleteROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 31, DeleteROSpecResponse.
func TestDeleteROSpecResponse_roundTrip(t *testing.T) {
	m := deleteROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 deleteROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 22, StartROSpec.
func TestStartROSpec_roundTrip(t *testing.T) {
	m := startROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 startROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 32, StartROSpecResponse.
func TestStartROSpecResponse_roundTrip(t *testing.T) {
	m := startROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 startROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 23, StopROSpec.
func TestStopROSpec_roundTrip(t *testing.T) {
	m := stopROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 stopROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 33, StopROSpecResponse.
func TestStopROSpecResponse_roundTrip(t *testing.T) {
	m := stopROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 stopROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 24, EnableROSpec.
func TestEnableROSpec_roundTrip(t *testing.T) {
	m := enableROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 34, EnableROSpecResponse.
func TestEnableROSpecResponse_roundTrip(t *testing.T) {
	m := enableROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 25, DisableROSpec.
func TestDisableROSpec_roundTrip(t *testing.T) {
	m := disableROSpec{
		ROSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 disableROSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 35, DisableROSpecResponse.
func TestDisableROSpecResponse_roundTrip(t *testing.T) {
	m := disableROSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 disableROSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 26, GetROSpecs.
func TestGetROSpecs_roundTrip(t *testing.T) {
	m := getROSpecs{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getROSpecs
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 36, GetROSpecsResponse.
func TestGetROSpecsResponse_roundTrip(t *testing.T) {
	m := getROSpecsResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getROSpecsResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 40, AddAccessSpec.
func TestAddAccessSpec_roundTrip(t *testing.T) {
	m := addAccessSpec{
		AccessSpec: accessSpec{
			AccessSpecID:    2147483648,
			AntennaID:       32768,
			AirProtocolID:   AirProtoEPCGlobalClass1Gen2,
			AccessSpecFlags: 128,
			ROSpecID:        2147483648,
			AccessSpecStopTrigger: accessSpecStopTrigger{
				AccessSpecStopTriggerType: AccessSpecStopTriggerOperationCount,
				OperationCountValue:       32768,
			},
			AccessCommand: accessCommand{
				C1G2TagSpec: c1G2TagSpec{
					TagPattern1: c1G2TargetTag{
						C1G2MemoryBank:     uint8(1),
						MatchFlag:          true,
						MostSignificantBit: 32768,
						TagMaskNumBits:     32,
						TagMask:            []byte{0x0, 0x1, 0x2, 0x3},
						TagDataNumBits:     32,
						TagData:            []byte{0x0, 0x1, 0x2, 0x3},
					},
				},
			},
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 addAccessSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 50, AddAccessSpecResponse.
func TestAddAccessSpecResponse_roundTrip(t *testing.T) {
	m := addAccessSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 addAccessSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 41, DeleteAccessSpec.
func TestDeleteAccessSpec_roundTrip(t *testing.T) {
	m := deleteAccessSpec{
		AccessSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 deleteAccessSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 51, DeleteAccessSpecResponse.
func TestDeleteAccessSpecResponse_roundTrip(t *testing.T) {
	m := deleteAccessSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 deleteAccessSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 42, EnableAccessSpec.
func TestEnableAccessSpec_roundTrip(t *testing.T) {
	m := enableAccessSpec{
		AccessSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableAccessSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 52, EnableAccessSpecResponse.
func TestEnableAccessSpecResponse_roundTrip(t *testing.T) {
	m := enableAccessSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableAccessSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 43, DisableAccessSpec.
func TestDisableAccessSpec_roundTrip(t *testing.T) {
	m := disableAccessSpec{
		AccessSpecID: 2147483648,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 disableAccessSpec
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 53, DisableAccessSpecResponse.
func TestDisableAccessSpecResponse_roundTrip(t *testing.T) {
	m := disableAccessSpecResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 disableAccessSpecResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 44, GetAccessSpecs.
func TestGetAccessSpecs_roundTrip(t *testing.T) {
	m := getAccessSpecs{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getAccessSpecs
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 54, GetAccessSpecsResponse.
func TestGetAccessSpecsResponse_roundTrip(t *testing.T) {
	m := getAccessSpecsResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getAccessSpecsResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 45, ClientRequestOp.
func TestClientRequestOp_roundTrip(t *testing.T) {
	m := clientRequestOp{
		TagReportData: tagReportData{
			EPCData: epcData{
				EPCNumBits: 32,
				EPC:        []byte{0x0, 0x1, 0x2, 0x3},
			},
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 clientRequestOp
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 55, ClientRequestOpResponse.
func TestClientRequestOpResponse_roundTrip(t *testing.T) {
	m := clientRequestOpResponse{
		ClientRequestResponse: clientRequestResponse{
			AccessSpecID: 2147483648,
			EPCData: epcData{
				EPCNumBits: 32,
				EPC:        []byte{0x0, 0x1, 0x2, 0x3},
			},
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 clientRequestOpResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 60, GetReport.
func TestGetReport_roundTrip(t *testing.T) {
	m := getReport{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReport
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 61, ROAccessReport.
func TestROAccessReport_roundTrip(t *testing.T) {
	m := roAccessReport{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 roAccessReport
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 62, KeepAlive.
func TestKeepAlive_roundTrip(t *testing.T) {
	m := keepAlive{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 keepAlive
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 72, KeepAliveACK.
func TestKeepAliveACK_roundTrip(t *testing.T) {
	m := keepAliveACK{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 keepAliveACK
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 63, ReaderEventNotification.
func TestReaderEventNotification_roundTrip(t *testing.T) {
	m := readerEventNotification{
		ReaderEventNotificationData: readerEventNotificationData{
			UTCTimestamp: utcTimestamp(uint64(9223372036854775808)),
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 readerEventNotification
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 64, EnableEventsAndReports.
func TestEnableEventsAndReports_roundTrip(t *testing.T) {
	m := enableEventsAndReports{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 enableEventsAndReports
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 100, ErrorMessage.
func TestErrorMessage_roundTrip(t *testing.T) {
	m := errorMessage{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 errorMessage
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 2, GetReaderConfig.
func TestGetReaderConfig_roundTrip(t *testing.T) {
	m := getReaderConfig{
		AntennaID:                 32768,
		ReaderConfigRequestedData: ReaderConfReqAccessReportSpec,
		GPIPortNum:                32768,
		GPOPortNum:                32768,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReaderConfig
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 12, GetReaderConfigResponse.
func TestGetReaderConfigResponse_roundTrip(t *testing.T) {
	m := getReaderConfigResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 getReaderConfigResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 3, SetReaderConfig.
func TestSetReaderConfig_roundTrip(t *testing.T) {
	m := setReaderConfig{
		ResetToFactoryDefaults: true,
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 setReaderConfig
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 13, SetReaderConfigResponse.
func TestSetReaderConfigResponse_roundTrip(t *testing.T) {
	m := setReaderConfigResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 setReaderConfigResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 14, CloseConnection.
func TestCloseConnection_roundTrip(t *testing.T) {
	m := closeConnection{}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 closeConnection
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 4, CloseConnectionResponse.
func TestCloseConnectionResponse_roundTrip(t *testing.T) {
	m := closeConnectionResponse{
		LLRPStatus: llrpStatus{
			Status:           StatusMsgMsgUnexpected,
			ErrorDescription: "some arbitrary string",
		},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 closeConnectionResponse
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}

// Test Message 1023, CustomMessage.
func TestCustomMessage_roundTrip(t *testing.T) {
	m := customMessage{
		VendorID:       2147483648,
		MessageSubtype: 128,
		Data:           []byte{128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19},
	}
	b, err := m.MarshalBinary()
	if err != nil {
		t.Fatalf("%+v", err)
	}
	var m2 customMessage
	if err := m2.UnmarshalBinary(b); err != nil {
		t.Errorf("%+v", err)
	}
	if !reflect.DeepEqual(m, m2) {
		t.Errorf("mismatch:\n%# 02x\n%+v\n%+v", b, m, m2)
	}
}
