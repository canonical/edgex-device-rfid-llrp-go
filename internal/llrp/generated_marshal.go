//
// Copyright (C) 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by "generate_param_code.py -i messages.yaml --test-file=binary_test.go --marshal-file=generated_marshal.go --unmarshal-file=generated_unmarshal.go --encode-file=generated_encoder.go --no-gofmt"; DO NOT EDIT.
package llrp

import (
	"bytes"
)

// b2b converts a bool to a byte, because Go doesn't have a built-in
// for it.
func b2b(b bool) byte {
	if b {
		return 1
	}
	return 0
}

// MarshalBinary Message 46, GetSupportedVersion.
func (m *getSupportedVersion) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 56, GetSupportedVersionResponse.
func (m *getSupportedVersionResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 47, SetProtocolVersion.
func (m *setProtocolVersion) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 57, SetProtocolVersionResponse.
func (m *setProtocolVersionResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 1, GetReaderCapabilities.
func (m *getReaderCapabilities) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range m.Custom {
		if err := encodeParams(&b, m.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 11, GetReaderCapabilitiesResponse.
func (m *getReaderCapabilitiesResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	if m.GeneralDeviceCapabilities != nil {
		if err := encodeParams(&b, m.GeneralDeviceCapabilities.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.LLRPCapabilities != nil {
		if err := encodeParams(&b, m.LLRPCapabilities.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.RegulatoryCapabilities != nil {
		if err := encodeParams(&b, m.RegulatoryCapabilities.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.C1G2LLRPCapabilities != nil {
		if err := encodeParams(&b, m.C1G2LLRPCapabilities.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.Custom {
		if err := encodeParams(&b, m.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 20, AddROSpec.
func (m *addROSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.ROSpec.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 30, AddROSpecResponse.
func (m *addROSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 21, DeleteROSpec.
func (m *deleteROSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 31, DeleteROSpecResponse.
func (m *deleteROSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 22, StartROSpec.
func (m *startROSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 32, StartROSpecResponse.
func (m *startROSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 23, StopROSpec.
func (m *stopROSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 33, StopROSpecResponse.
func (m *stopROSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 24, EnableROSpec.
func (m *enableROSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 34, EnableROSpecResponse.
func (m *enableROSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 25, DisableROSpec.
func (m *disableROSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 35, DisableROSpecResponse.
func (m *disableROSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 26, GetROSpecs.
func (m *getROSpecs) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 36, GetROSpecsResponse.
func (m *getROSpecsResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	for i := range m.ROSpec {
		if err := encodeParams(&b, m.ROSpec[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 40, AddAccessSpec.
func (m *addAccessSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.AccessSpec.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 50, AddAccessSpecResponse.
func (m *addAccessSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 41, DeleteAccessSpec.
func (m *deleteAccessSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 51, DeleteAccessSpecResponse.
func (m *deleteAccessSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 42, EnableAccessSpec.
func (m *enableAccessSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 52, EnableAccessSpecResponse.
func (m *enableAccessSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 43, DisableAccessSpec.
func (m *disableAccessSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 53, DisableAccessSpecResponse.
func (m *disableAccessSpecResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 44, GetAccessSpecs.
func (m *getAccessSpecs) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 54, GetAccessSpecsResponse.
func (m *getAccessSpecsResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	for i := range m.AccessSpec {
		if err := encodeParams(&b, m.AccessSpec[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 45, ClientRequestOp.
func (m *clientRequestOp) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.TagReportData.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 55, ClientRequestOpResponse.
func (m *clientRequestOpResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.ClientRequestResponse.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 60, GetReport.
func (m *getReport) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 61, ROAccessReport.
func (m *roAccessReport) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range m.TagReportData {
		if err := encodeParams(&b, m.TagReportData[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.RFSurveyReportData {
		if err := encodeParams(&b, m.RFSurveyReportData[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.Custom {
		if err := encodeParams(&b, m.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 62, KeepAlive.
func (m *keepAlive) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 72, KeepAliveACK.
func (m *keepAliveACK) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 63, ReaderEventNotification.
func (m *readerEventNotification) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.ReaderEventNotificationData.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 64, EnableEventsAndReports.
func (m *enableEventsAndReports) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 100, ErrorMessage.
func (m *errorMessage) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 2, GetReaderConfig.
func (m *getReaderConfig) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range m.Custom {
		if err := encodeParams(&b, m.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 12, GetReaderConfigResponse.
func (m *getReaderConfigResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	if m.Identification != nil {
		if err := encodeParams(&b, m.Identification.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.AntennaProperties {
		if err := encodeParams(&b, m.AntennaProperties[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.AntennaConfiguration {
		if err := encodeParams(&b, m.AntennaConfiguration[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if m.ReaderEventNotificationSpec != nil {
		if err := encodeParams(&b, m.ReaderEventNotificationSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.ROReportSpec != nil {
		if err := encodeParams(&b, m.ROReportSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.AccessReportSpec != nil {
		if err := encodeParams(&b, m.AccessReportSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.LLRPConfigurationStateValue != nil {
		if err := encodeParams(&b, m.LLRPConfigurationStateValue.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.KeepAliveSpec != nil {
		if err := encodeParams(&b, m.KeepAliveSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.GPIPortCurrentState {
		if err := encodeParams(&b, m.GPIPortCurrentState[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.GPOWriteData {
		if err := encodeParams(&b, m.GPOWriteData[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if m.EventsAndReports != nil {
		if err := encodeParams(&b, m.EventsAndReports.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.Custom {
		if err := encodeParams(&b, m.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 3, SetReaderConfig.
func (m *setReaderConfig) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if m.ReaderEventNotificationSpec != nil {
		if err := encodeParams(&b, m.ReaderEventNotificationSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.AntennaProperties {
		if err := encodeParams(&b, m.AntennaProperties[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.AntennaConfiguration {
		if err := encodeParams(&b, m.AntennaConfiguration[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if m.ROReportSpec != nil {
		if err := encodeParams(&b, m.ROReportSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.AccessReportSpec != nil {
		if err := encodeParams(&b, m.AccessReportSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	if m.KeepAliveSpec != nil {
		if err := encodeParams(&b, m.KeepAliveSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.GPOWriteData {
		if err := encodeParams(&b, m.GPOWriteData[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.GPIPortCurrentState {
		if err := encodeParams(&b, m.GPIPortCurrentState[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if m.EventsAndReports != nil {
		if err := encodeParams(&b, m.EventsAndReports.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range m.Custom {
		if err := encodeParams(&b, m.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 13, SetReaderConfigResponse.
func (m *setReaderConfigResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 14, CloseConnection.
func (m *closeConnection) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 4, CloseConnectionResponse.
func (m *closeConnectionResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, m.LLRPStatus.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Message 1023, CustomMessage.
func (m *customMessage) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := m.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 1, AntennaID.
func (p *antennaID) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 2, FirstSeenUTC.
func (p *firstSeenUTC) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 3, FirstSeenUptime.
func (p *firstSeenUptime) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 4, LastSeenUTC.
func (p *lastSeenUTC) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 5, LastSeenUptime.
func (p *lastSeenUptime) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 6, PeakRSSI.
func (p *peakRSSI) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 7, ChannelIndex.
func (p *channelIndex) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 8, TagSeenCount.
func (p *tagSeenCount) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 9, ROSpecID.
func (p *roSpecID) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 10, InventoryParameterSpecID.
func (p *inventoryParameterSpecID) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 11, C1G2CRC.
func (p *c1G2CRC) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 12, C1G2PC.
func (p *c1G2PC) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 13, EPC96.
func (p *epc96) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 14, SpecIndex.
func (p *specIndex) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 15, ClientRequestOpSpecResult.
func (p *clientRequestOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 16, AccessSpecID.
func (p *accessSpecID) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 17, OpSpecID.
func (p *opSpecID) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 18, C1G2SingulationDetails.
func (p *c1G2SingulationDetails) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 19, C1G2XPCW1.
func (p *c1G2XPCW1) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 20, C1G2XPCW2.
func (p *c1G2XPCW2) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 128, UTCTimestamp.
func (p *utcTimestamp) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 129, Uptime.
func (p *uptime) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 137, GeneralDeviceCapabilities.
func (p *generalDeviceCapabilities) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.ReceiveSensitivityTableEntries {
		if err := encodeParams(&b, p.ReceiveSensitivityTableEntries[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.PerAntennaReceiveSensitivityRanges {
		if err := encodeParams(&b, p.PerAntennaReceiveSensitivityRanges[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if err := encodeParams(&b, p.GPIOCapabilities.getHeader()); err != nil {
		return nil, err
	}
	for i := range p.PerAntennaAirProtocols {
		if err := encodeParams(&b, p.PerAntennaAirProtocols[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if p.MaximumReceiveSensitivity != nil {
		if err := encodeParams(&b, p.MaximumReceiveSensitivity.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 139, ReceiveSensitivityTableEntry.
func (p *receiveSensitivityTableEntry) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 140, PerAntennaAirProtocol.
func (p *perAntennaAirProtocol) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 141, GPIOCapabilities.
func (p *gpioCapabilities) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 142, LLRPCapabilities.
func (p *llrpCapabilities) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 143, RegulatoryCapabilities.
func (p *regulatoryCapabilities) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.UHFBandCapabilities != nil {
		if err := encodeParams(&b, p.UHFBandCapabilities.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 144, UHFBandCapabilities.
func (p *uhfBandCapabilities) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.TransmitPowerLevelTableEntry {
		if err := encodeParams(&b, p.TransmitPowerLevelTableEntry[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.FrequencyInformation {
		if err := encodeParams(&b, p.FrequencyInformation[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.UHFC1G2RFModeTable {
		if err := encodeParams(&b, p.UHFC1G2RFModeTable[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if p.RFSurveyFrequencyCapabilities != nil {
		if err := encodeParams(&b, p.RFSurveyFrequencyCapabilities.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 145, TransmitPowerLevelTableEntry.
func (p *transmitPowerLevelTableEntry) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 146, FrequencyInformation.
func (p *frequencyInformation) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.FrequencyHopTable {
		if err := encodeParams(&b, p.FrequencyHopTable[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if p.FixedFrequencyTable != nil {
		if err := encodeParams(&b, p.FixedFrequencyTable.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 147, FrequencyHopTable.
func (p *frequencyHopTable) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 148, FixedFrequencyTable.
func (p *fixedFrequencyTable) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 149, PerAntennaReceiveSensitivityRange.
func (p *perAntennaReceiveSensitivityRange) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 177, ROSpec.
func (p *roSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.ROBoundarySpec.getHeader()); err != nil {
		return nil, err
	}
	for i := range p.AISpec {
		if err := encodeParams(&b, p.AISpec[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.RFSurveySpec {
		if err := encodeParams(&b, p.RFSurveySpec[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if p.LoopSpec != nil {
		if err := encodeParams(&b, p.LoopSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ROReportSpec != nil {
		if err := encodeParams(&b, p.ROReportSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 178, ROBoundarySpec.
func (p *roBoundarySpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.ROSpecStartTrigger.getHeader()); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.ROSpecStopTrigger.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 179, ROSpecStartTrigger.
func (p *roSpecStartTrigger) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.PeriodicTriggerValue != nil {
		if err := encodeParams(&b, p.PeriodicTriggerValue.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.GPITriggerValue != nil {
		if err := encodeParams(&b, p.GPITriggerValue.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 180, PeriodicTriggerValue.
func (p *periodicTriggerValue) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.UTCTimestamp != nil {
		if err := encodeParams(&b, p.UTCTimestamp.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 181, GPITriggerValue.
func (p *gpiTriggerValue) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 182, ROSpecStopTrigger.
func (p *roSpecStopTrigger) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.GPITriggerValue != nil {
		if err := encodeParams(&b, p.GPITriggerValue.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 183, AISpec.
func (p *aiSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.AISpecStopTrigger.getHeader()); err != nil {
		return nil, err
	}
	for i := range p.InventoryParameterSpec {
		if err := encodeParams(&b, p.InventoryParameterSpec[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 184, AISpecStopTrigger.
func (p *aiSpecStopTrigger) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.GPITriggerValue != nil {
		if err := encodeParams(&b, p.GPITriggerValue.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.TagObservationTrigger != nil {
		if err := encodeParams(&b, p.TagObservationTrigger.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 185, TagObservationTrigger.
func (p *tagObservationTrigger) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 186, InventoryParameterSpec.
func (p *inventoryParameterSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.AntennaConfiguration {
		if err := encodeParams(&b, p.AntennaConfiguration[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 187, RFSurveySpec.
func (p *rfSurveySpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.RFSurveySpecStopTrigger.getHeader()); err != nil {
		return nil, err
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 188, RFSurveySpecStopTrigger.
func (p *rfSurveySpecStopTrigger) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 207, AccessSpec.
func (p *accessSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.AccessSpecStopTrigger.getHeader()); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.AccessCommand.getHeader()); err != nil {
		return nil, err
	}
	if p.AccessReportSpec != nil {
		if err := encodeParams(&b, p.AccessReportSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 208, AccessSpecStopTrigger.
func (p *accessSpecStopTrigger) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 209, AccessCommand.
func (p *accessCommand) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.C1G2TagSpec.getHeader()); err != nil {
		return nil, err
	}
	if p.C1G2Read != nil {
		if err := encodeParams(&b, p.C1G2Read.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2Write != nil {
		if err := encodeParams(&b, p.C1G2Write.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2Kill != nil {
		if err := encodeParams(&b, p.C1G2Kill.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2Recommission != nil {
		if err := encodeParams(&b, p.C1G2Recommission.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2Lock != nil {
		if err := encodeParams(&b, p.C1G2Lock.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2BlockErase != nil {
		if err := encodeParams(&b, p.C1G2BlockErase.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2BlockWrite != nil {
		if err := encodeParams(&b, p.C1G2BlockWrite.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2BlockPermalock != nil {
		if err := encodeParams(&b, p.C1G2BlockPermalock.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		if err := encodeParams(&b, p.C1G2GetBlockPermalockStatus.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ClientRequestOpSpec != nil {
		if err := encodeParams(&b, p.ClientRequestOpSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 210, ClientRequestOpSpec.
func (p *clientRequestOpSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 211, ClientRequestResponse.
func (p *clientRequestResponse) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.EPCData.getHeader()); err != nil {
		return nil, err
	}
	if p.C1G2Read != nil {
		if err := encodeParams(&b, p.C1G2Read.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2Write != nil {
		if err := encodeParams(&b, p.C1G2Write.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2Kill != nil {
		if err := encodeParams(&b, p.C1G2Kill.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2Recommission != nil {
		if err := encodeParams(&b, p.C1G2Recommission.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2Lock != nil {
		if err := encodeParams(&b, p.C1G2Lock.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2BlockErase != nil {
		if err := encodeParams(&b, p.C1G2BlockErase.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2BlockWrite != nil {
		if err := encodeParams(&b, p.C1G2BlockWrite.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2BlockPermalock != nil {
		if err := encodeParams(&b, p.C1G2BlockPermalock.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		if err := encodeParams(&b, p.C1G2GetBlockPermalockStatus.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ClientRequestOpSpec != nil {
		if err := encodeParams(&b, p.ClientRequestOpSpec.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.Custom != nil {
		if err := encodeParams(&b, p.Custom.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 217, LLRPConfigurationStateValue.
func (p *llrpConfigurationStateValue) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 218, Identification.
func (p *identification) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 219, GPOWriteData.
func (p *gpoWriteData) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 220, KeepAliveSpec.
func (p *keepAliveSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 221, AntennaProperties.
func (p *antennaProperties) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 222, AntennaConfiguration.
func (p *antennaConfiguration) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.RFReceiver != nil {
		if err := encodeParams(&b, p.RFReceiver.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.RFTransmitter != nil {
		if err := encodeParams(&b, p.RFTransmitter.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2InventoryCommand {
		if err := encodeParams(&b, p.C1G2InventoryCommand[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 223, RFReceiver.
func (p *rfReceiver) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 224, RFTransmitter.
func (p *rfTransmitter) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 225, GPIPortCurrentState.
func (p *gpiPortCurrentState) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 226, EventsAndReports.
func (p *eventsAndReports) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 237, ROReportSpec.
func (p *roReportSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.TagReportContentSelector.getHeader()); err != nil {
		return nil, err
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 238, TagReportContentSelector.
func (p *tagReportContentSelector) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.C1G2EPCMemorySelector {
		if err := encodeParams(&b, p.C1G2EPCMemorySelector[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 239, AccessReportSpec.
func (p *accessReportSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 240, TagReportData.
func (p *tagReportData) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.EPCData.getHeader()); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.EPC96.getHeader()); err != nil {
		return nil, err
	}
	if p.ROSpecID != nil {
		if err := encodeParams(&b, p.ROSpecID.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.SpecIndex != nil {
		if err := encodeParams(&b, p.SpecIndex.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.InventoryParameterSpecID != nil {
		if err := encodeParams(&b, p.InventoryParameterSpecID.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.AntennaID != nil {
		if err := encodeParams(&b, p.AntennaID.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.PeakRSSI != nil {
		if err := encodeParams(&b, p.PeakRSSI.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ChannelIndex != nil {
		if err := encodeParams(&b, p.ChannelIndex.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.FirstSeenUTC != nil {
		if err := encodeParams(&b, p.FirstSeenUTC.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.FirstSeenUptime != nil {
		if err := encodeParams(&b, p.FirstSeenUptime.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.LastSeenUTC != nil {
		if err := encodeParams(&b, p.LastSeenUTC.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.LastSeenUptime != nil {
		if err := encodeParams(&b, p.LastSeenUptime.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.TagSeenCount != nil {
		if err := encodeParams(&b, p.TagSeenCount.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2PC {
		if err := encodeParams(&b, p.C1G2PC[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2XPCW1 {
		if err := encodeParams(&b, p.C1G2XPCW1[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2XPCW2 {
		if err := encodeParams(&b, p.C1G2XPCW2[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2CRC {
		if err := encodeParams(&b, p.C1G2CRC[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if p.AccessSpecID != nil {
		if err := encodeParams(&b, p.AccessSpecID.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2ReadOpSpecResult {
		if err := encodeParams(&b, p.C1G2ReadOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2WriteOpSpecResult {
		if err := encodeParams(&b, p.C1G2WriteOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2KillOpSpecResult {
		if err := encodeParams(&b, p.C1G2KillOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2LockOpSpecResult {
		if err := encodeParams(&b, p.C1G2LockOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2BlockEraseOpSpecResult {
		if err := encodeParams(&b, p.C1G2BlockEraseOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2BlockWriteOpSpecResult {
		if err := encodeParams(&b, p.C1G2BlockWriteOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2RecommissionOpSpecResult {
		if err := encodeParams(&b, p.C1G2RecommissionOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2BlockPermalockOpSpecResult {
		if err := encodeParams(&b, p.C1G2BlockPermalockOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.C1G2GetBlockPermalockStatusOpSpecResult {
		if err := encodeParams(&b, p.C1G2GetBlockPermalockStatusOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.ClientRequestOpSpecResult {
		if err := encodeParams(&b, p.ClientRequestOpSpecResult[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 241, EPCData.
func (p *epcData) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 242, RFSurveyReportData.
func (p *rfSurveyReportData) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.ROSpecID != nil {
		if err := encodeParams(&b, p.ROSpecID.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.SpecIndex != nil {
		if err := encodeParams(&b, p.SpecIndex.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.FrequencyRSSILevelEntry {
		if err := encodeParams(&b, p.FrequencyRSSILevelEntry[i].getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 243, FrequencyRSSILevelEntry.
func (p *frequencyRSSILevelEntry) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.UTCTimestamp.getHeader()); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.Uptime.getHeader()); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 244, ReaderEventNotificationSpec.
func (p *readerEventNotificationSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.EventNotificationState {
		if err := encodeParams(&b, p.EventNotificationState[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 245, EventNotificationState.
func (p *eventNotificationState) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 246, ReaderEventNotificationData.
func (p *readerEventNotificationData) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.UTCTimestamp.getHeader()); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.Uptime.getHeader()); err != nil {
		return nil, err
	}
	if p.HoppingEvent != nil {
		if err := encodeParams(&b, p.HoppingEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.GPIEvent != nil {
		if err := encodeParams(&b, p.GPIEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ROSpecEvent != nil {
		if err := encodeParams(&b, p.ROSpecEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ReportBufferLevelWarningEvent != nil {
		if err := encodeParams(&b, p.ReportBufferLevelWarningEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ReportBufferOverflowErrorEvent != nil {
		if err := encodeParams(&b, p.ReportBufferOverflowErrorEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ReaderExceptionEvent != nil {
		if err := encodeParams(&b, p.ReaderExceptionEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.RFSurveyEvent != nil {
		if err := encodeParams(&b, p.RFSurveyEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.AISpecEvent != nil {
		if err := encodeParams(&b, p.AISpecEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.AntennaEvent != nil {
		if err := encodeParams(&b, p.AntennaEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ConnectionAttemptEvent != nil {
		if err := encodeParams(&b, p.ConnectionAttemptEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ConnectionCloseEvent != nil {
		if err := encodeParams(&b, p.ConnectionCloseEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.SpecLoopEvent != nil {
		if err := encodeParams(&b, p.SpecLoopEvent.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 247, HoppingEvent.
func (p *hoppingEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 248, GPIEvent.
func (p *gpiEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 249, ROSpecEvent.
func (p *roSpecEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 250, ReportBufferLevelWarningEvent.
func (p *reportBufferLevelWarningEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 251, ReportBufferOverflowErrorEvent.
func (p *reportBufferOverflowErrorEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 252, ReaderExceptionEvent.
func (p *readerExceptionEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.ROSpecID != nil {
		if err := encodeParams(&b, p.ROSpecID.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.SpecIndex != nil {
		if err := encodeParams(&b, p.SpecIndex.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.InventoryParameterSpecID != nil {
		if err := encodeParams(&b, p.InventoryParameterSpecID.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.AntennaID != nil {
		if err := encodeParams(&b, p.AntennaID.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.AccessSpecID != nil {
		if err := encodeParams(&b, p.AccessSpecID.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.OpSpecID != nil {
		if err := encodeParams(&b, p.OpSpecID.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 253, RFSurveyEvent.
func (p *rfSurveyEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 254, AISpecEvent.
func (p *aiSpecEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.C1G2SingulationDetails != nil {
		if err := encodeParams(&b, p.C1G2SingulationDetails.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 255, AntennaEvent.
func (p *antennaEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 256, ConnectionAttemptEvent.
func (p *connectionAttemptEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 257, ConnectionCloseEvent.
func (p *connectionCloseEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 287, LLRPStatus.
func (p *llrpStatus) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.FieldError != nil {
		if err := encodeParams(&b, p.FieldError.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.ParameterError != nil {
		if err := encodeParams(&b, p.ParameterError.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 288, FieldError.
func (p *fieldError) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 289, ParameterError.
func (p *parameterError) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.ParameterError != nil {
		if err := encodeParams(&b, p.ParameterError.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.FieldError != nil {
		if err := encodeParams(&b, p.FieldError.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 327, C1G2LLRPCapabilities.
func (p *c1G2LLRPCapabilities) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 328, UHFC1G2RFModeTable.
func (p *uhfc1G2RFModeTable) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.UHFC1G2RFModeTableEntry {
		if err := encodeParams(&b, p.UHFC1G2RFModeTableEntry[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 329, UHFC1G2RFModeTableEntry.
func (p *uhfc1G2RFModeTableEntry) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 330, C1G2InventoryCommand.
func (p *c1G2InventoryCommand) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.C1G2Filter {
		if err := encodeParams(&b, p.C1G2Filter[i].getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2RFControl != nil {
		if err := encodeParams(&b, p.C1G2RFControl.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2SingulationControl != nil {
		if err := encodeParams(&b, p.C1G2SingulationControl.getHeader()); err != nil {
			return nil, err
		}
	}
	for i := range p.Custom {
		if err := encodeParams(&b, p.Custom[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 331, C1G2Filter.
func (p *c1G2Filter) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.C1G2TagInventoryMask.getHeader()); err != nil {
		return nil, err
	}
	if p.C1G2TagInventoryStateAwareFilterAction != nil {
		if err := encodeParams(&b, p.C1G2TagInventoryStateAwareFilterAction.getHeader()); err != nil {
			return nil, err
		}
	}
	if p.C1G2TagInventoryStateUnawareFilterAction != nil {
		if err := encodeParams(&b, p.C1G2TagInventoryStateUnawareFilterAction.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 332, C1G2TagInventoryMask.
func (p *c1G2TagInventoryMask) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 333,
// C1G2TagInventoryStateAwareFilterAction.
func (p *c1G2TagInventoryStateAwareFilterAction) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 334,
// C1G2TagInventoryStateUnawareFilterAction.
func (p *c1G2TagInventoryStateUnawareFilterAction) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 335, C1G2RFControl.
func (p *c1G2RFControl) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 336, C1G2SingulationControl.
func (p *c1G2SingulationControl) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if p.C1G2TagInventoryStateAwareSingulationAction != nil {
		if err := encodeParams(&b, p.C1G2TagInventoryStateAwareSingulationAction.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 337,
// C1G2TagInventoryStateAwareSingulationAction.
func (p *c1G2TagInventoryStateAwareSingulationAction) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 338, C1G2TagSpec.
func (p *c1G2TagSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	if err := encodeParams(&b, p.TagPattern1.getHeader()); err != nil {
		return nil, err
	}
	if p.TagPattern2 != nil {
		if err := encodeParams(&b, p.TagPattern2.getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 339, C1G2TargetTag.
func (p *c1G2TargetTag) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 341, C1G2Read.
func (p *c1G2Read) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 342, C1G2Write.
func (p *c1G2Write) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 343, C1G2Kill.
func (p *c1G2Kill) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 344, C1G2Lock.
func (p *c1G2Lock) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	for i := range p.C1G2LockPayload {
		if err := encodeParams(&b, p.C1G2LockPayload[i].getHeader()); err != nil {
			return nil, err
		}
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 345, C1G2LockPayload.
func (p *c1G2LockPayload) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 346, C1G2BlockErase.
func (p *c1G2BlockErase) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 347, C1G2BlockWrite.
func (p *c1G2BlockWrite) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 348, C1G2EPCMemorySelector.
func (p *c1G2EPCMemorySelector) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 349, C1G2ReadOpSpecResult.
func (p *c1G2ReadOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 350, C1G2WriteOpSpecResult.
func (p *c1G2WriteOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 351, C1G2KillOpSpecResult.
func (p *c1G2KillOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 352, C1G2LockOpSpecResult.
func (p *c1G2LockOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 353, C1G2BlockEraseOpSpecResult.
func (p *c1G2BlockEraseOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 354, C1G2BlockWriteOpSpecResult.
func (p *c1G2BlockWriteOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 355, LoopSpec.
func (p *loopSpec) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 356, SpecLoopEvent.
func (p *specLoopEvent) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 357, C1G2Recommission.
func (p *c1G2Recommission) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 358, C1G2BlockPermalock.
func (p *c1G2BlockPermalock) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 359, C1G2GetBlockPermalockStatus.
func (p *c1G2GetBlockPermalockStatus) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 360, C1G2RecommissionOpSpecResult.
func (p *c1G2RecommissionOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 361, C1G2BlockPermalockOpSpecResult.
func (p *c1G2BlockPermalockOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 362,
// C1G2GetBlockPermalockStatusOpSpecResult.
func (p *c1G2GetBlockPermalockStatusOpSpecResult) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 363, MaximumReceiveSensitivity.
func (p *maximumReceiveSensitivity) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 365, RFSurveyFrequencyCapabilities.
func (p *rfSurveyFrequencyCapabilities) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

// MarshalBinary Parameter 1023, Custom.
func (p *custom) MarshalBinary() ([]byte, error) {
	b := bytes.Buffer{}
	if err := p.EncodeFields(&b); err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}
