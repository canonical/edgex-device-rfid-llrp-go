//
// Copyright (C) 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by "stringer -type=VersionNum,MessageType"; DO NOT EDIT.

package llrp

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[versionInvalid-0]
	_ = x[Version1_0_1-1]
	_ = x[Version1_1-2]
}

const _VersionNum_name = "versionInvalidVersion1_0_1Version1_1"

var _VersionNum_index = [...]uint8{0, 14, 26, 36}

func (i VersionNum) String() string {
	if i >= VersionNum(len(_VersionNum_index)-1) {
		return "VersionNum(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _VersionNum_name[_VersionNum_index[i]:_VersionNum_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GetReaderCapabilities-1]
	_ = x[GetReaderConfig-2]
	_ = x[GetReaderConfigResponse-12]
	_ = x[SetReaderConfig-3]
	_ = x[CloseConnectionResponse-4]
	_ = x[GetReaderCapabilitiesResponse-11]
	_ = x[SetReaderConfigResponse-13]
	_ = x[CloseConnection-14]
	_ = x[GetSupportedVersion-46]
	_ = x[SetProtocolVersion-47]
	_ = x[GetSupportedVersionResponse-56]
	_ = x[SetProtocolVersionResponse-57]
	_ = x[KeepAlive-62]
	_ = x[ReaderEventNotification-63]
	_ = x[KeepAliveAck-72]
	_ = x[ErrorMessage-100]
	_ = x[CustomMessage-1023]
	_ = x[msgResvStart-900]
	_ = x[msgResvEnd-999]
}

const (
	_MessageType_name_0 = "GetReaderCapabilitiesGetReaderConfigSetReaderConfigCloseConnectionResponse"
	_MessageType_name_1 = "GetReaderCapabilitiesResponseGetReaderConfigResponseSetReaderConfigResponseCloseConnection"
	_MessageType_name_2 = "GetSupportedVersionSetProtocolVersion"
	_MessageType_name_3 = "GetSupportedVersionResponseSetProtocolVersionResponse"
	_MessageType_name_4 = "KeepAliveReaderEventNotification"
	_MessageType_name_5 = "KeepAliveAck"
	_MessageType_name_6 = "ErrorMessage"
	_MessageType_name_7 = "msgResvStart"
	_MessageType_name_8 = "msgResvEnd"
	_MessageType_name_9 = "CustomMessage"
)

var (
	_MessageType_index_0 = [...]uint8{0, 21, 36, 51, 74}
	_MessageType_index_1 = [...]uint8{0, 29, 52, 75, 90}
	_MessageType_index_2 = [...]uint8{0, 19, 37}
	_MessageType_index_3 = [...]uint8{0, 27, 53}
	_MessageType_index_4 = [...]uint8{0, 9, 32}
)

func (i MessageType) String() string {
	switch {
	case 1 <= i && i <= 4:
		i -= 1
		return _MessageType_name_0[_MessageType_index_0[i]:_MessageType_index_0[i+1]]
	case 11 <= i && i <= 14:
		i -= 11
		return _MessageType_name_1[_MessageType_index_1[i]:_MessageType_index_1[i+1]]
	case 46 <= i && i <= 47:
		i -= 46
		return _MessageType_name_2[_MessageType_index_2[i]:_MessageType_index_2[i+1]]
	case 56 <= i && i <= 57:
		i -= 56
		return _MessageType_name_3[_MessageType_index_3[i]:_MessageType_index_3[i+1]]
	case 62 <= i && i <= 63:
		i -= 62
		return _MessageType_name_4[_MessageType_index_4[i]:_MessageType_index_4[i+1]]
	case i == 72:
		return _MessageType_name_5
	case i == 100:
		return _MessageType_name_6
	case i == 900:
		return _MessageType_name_7
	case i == 999:
		return _MessageType_name_8
	case i == 1023:
		return _MessageType_name_9
	default:
		return "MessageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
